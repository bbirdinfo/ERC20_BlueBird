{
  "language": "Solidity",
  "sources": {
    "contracts/proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\ncontract ProxyBlueBird {\r\n  bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n  bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n  constructor(address _add) {\r\n    bytes32 slot = _ADMIN_SLOT;\r\n    address _admin = msg.sender;\r\n    assembly {\r\n      sstore(slot, _admin)\r\n    }\r\n    slot = _IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      sstore(slot, _add)\r\n    }\r\n  }\r\n\r\n  function admin() public view returns (address adm) {\r\n    bytes32 slot = _ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n\r\n  function implementation() public view returns (address impl) {\r\n    bytes32 slot = _IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  function upgrade(address newImplementation) external {\r\n    require(msg.sender == admin(), 'admin only');\r\n    bytes32 slot = _IMPLEMENTATION_SLOT;\r\n    assembly {\r\n      sstore(slot, newImplementation)\r\n    }\r\n  }\r\n\r\n  fallback() external payable {\r\n    assembly {\r\n      let _target := sload(_IMPLEMENTATION_SLOT)\r\n      calldatacopy(0x0, 0x0, calldatasize())\r\n      let result := delegatecall(gas(), _target, 0x0, calldatasize(), 0x0, 0)\r\n      returndatacopy(0x0, 0x0, returndatasize())\r\n      switch result case 0 {revert(0, 0)} default {return (0, returndatasize())}\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/*\r\npragma solidity ^0.8.0;\r\n\r\ncontract ProxyBlueBird {\r\n\r\n    address public delegate;\r\n    address public owner;\r\n\r\n    constructor(address newDelegateAddress){\r\n      owner = msg.sender;\r\n      delegate = newDelegateAddress;\r\n    }\r\n\r\n    function upgradeDelegate(address newDelegateAddress) public {\r\n        require(msg.sender == owner);\r\n        assembly {\r\n          sstore(slot, newDelegateAddress)\r\n        } \r\n    }\r\n\r\n    fallback() external payable {\r\n        assembly {\r\n            let _target := sload(0)\r\n            calldatacopy(0x0, 0x0, calldatasize())\r\n            let result := delegatecall(gas(), _target, 0x0, calldatasize(), 0x0, 0)\r\n            returndatacopy(0x0, 0x0, returndatasize())\r\n            switch result case 0 {revert(0, 0)} default {return (0, returndatasize())}\r\n        }\r\n    }\r\n}\r\n\r\ncontract ProxyBlueBird {\r\n  address public implementation;\r\n\r\n  constructor(address _implementation) {\r\n    implementation = _implementation;\r\n  }\r\n\r\n  function upgradeTo(address _newImplementation) public {\r\n    implementation = _newImplementation;\r\n  }\r\n\r\n  function call(bytes memory _data) public {\r\n    (bool success, ) = implementation.call(_data);\r\n    require(success, \"Call to implementation failed.\");\r\n  }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\r\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\r\n\r\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\r\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\r\n    constructor(address logic, bytes memory data) payable TransparentUpgradeableProxy(logic, msg.sender, data) {}\r\n}\r\n\r\n/*\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract Proxy{\r\n    address public implementation;\r\n    address public immutable owner;\r\n\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _implementation) {\r\n        owner = msg.sender;\r\n        implementation = _implementation;\r\n    }\r\n\r\n    function upgradeTo(address _implementation) public onlyOwner {\r\n        implementation = _implementation;\r\n    }\r\n\r\n    function execute(bytes memory _data) public {\r\n        (bool success,) = address(implementation).delegatecall(_data);\r\n        require(success);\r\n    }\r\n}\r\n*/"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}