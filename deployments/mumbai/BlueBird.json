{
  "address": "0x489Dfe5F88378F7cCE941535Af5BC0AD4766Ef98",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BlueBird__ErrorBilancio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlueBird__ErrorCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlueBird__ErrorERC20Capped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BlueBird__ErrorMint",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aggregatorUpgradeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintBurnEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mintDirectlyEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintFromMaticEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newpriceFeedAdd",
          "type": "address"
        }
      ],
      "name": "aggregatorUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaticRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinter4amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinter4minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "typeMining",
          "type": "string"
        }
      ],
      "name": "mintDirectly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFromMatic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "minter4amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "minter4minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d2e2c9da1ced090d4d9ce07086a8295b548ef746a92580ff7a3fb229e6cc881",
  "receipt": {
    "to": null,
    "from": "0xBc6107fAcc388290833AB411CBa71D83BB9f3c93",
    "contractAddress": "0x489Dfe5F88378F7cCE941535Af5BC0AD4766Ef98",
    "transactionIndex": 3,
    "gasUsed": "3258731",
    "logsBloom": "0x
    "blockHash": "0x50c2884c3aa0f0716d54891d52c75233d292dd4138cd48f0d89f0e131f70ec06",
    "transactionHash": "0x2d2e2c9da1ced090d4d9ce07086a8295b548ef746a92580ff7a3fb229e6cc881",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 31913936,
        "transactionHash": "0x2d2e2c9da1ced090d4d9ce07086a8295b548ef746a92580ff7a3fb229e6cc881",
        "address": "0x489Dfe5F88378F7cCE941535Af5BC0AD4766Ef98",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bc6107facc388290833ab411cba71d83bb9f3c93"
        ],
        "data": "0x0000000000000000000000000000000000000000000152d02c7e14af68000000",
        "logIndex": 8,
        "blockHash": "0x50c2884c3aa0f0716d54891d52c75233d292dd4138cd48f0d89f0e131f70ec06"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 31913936,
        "transactionHash": "0x2d2e2c9da1ced090d4d9ce07086a8295b548ef746a92580ff7a3fb229e6cc881",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bc6107facc388290833ab411cba71d83bb9f3c93",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000014b405f135fa42000000000000000000000000000000000000000000000000181d24e5c1b862ba000000000000000000000000000000000000000000002b090fba60251ffb94f6000000000000000000000000000000000000000000000000180870dfd0826878000000000000000000000000000000000000000000002b090fcf142b11318f38",
        "logIndex": 9,
        "blockHash": "0x50c2884c3aa0f0716d54891d52c75233d292dd4138cd48f0d89f0e131f70ec06"
      }
    ],
    "blockNumber": 31913936,
    "cumulativeGasUsed": "3403514",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada"
  ],
  "numDeployments": 65,
  "solcInputHash": "24e09df0deb8c688f0d453baab9e3666",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BlueBird__ErrorBilancio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlueBird__ErrorCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlueBird__ErrorERC20Capped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BlueBird__ErrorMint\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aggregatorUpgradeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintBurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mintDirectlyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintFromMaticEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newpriceFeedAdd\",\"type\":\"address\"}],\"name\":\"aggregatorUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaticRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter4amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter4minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeMining\",\"type\":\"string\"}],\"name\":\"mintDirectly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFromMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minter4amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minter4minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Samuele Chiesa\",\"details\":\"The contract uses openzeppeling lib\",\"kind\":\"dev\",\"methods\":{\"aggregatorUpgrade(address)\":{\"details\":\"AggregatorV3Interface is the base of the mint from Matic\",\"params\":{\"newpriceFeedAdd\":\"New address AggregatorV3Interface\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"amount\":\"The number of token will burn is already*1e18\"}},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"details\":\"In the constructor are define the mint cap for each entites and the mint state\",\"params\":{\"priceFeedAdd\":\"Address AggregatorV3Interface\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getBurned()\":{\"returns\":{\"_0\":\"return the owner of the contract\"}},\"getCap()\":{\"returns\":{\"_0\":\"return the maximum capilazation\"}},\"getMaticRate()\":{\"details\":\"The function are create for the test\"},\"getMinter4amount()\":{\"details\":\"The function are create for the test\"},\"getMinter4minted()\":{\"details\":\"The function are create for the test\"},\"getOwner()\":{\"returns\":{\"_0\":\"return the owner of the contract\"}},\"getPriceFeed()\":{\"details\":\"The function are create for the test\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintBurn(address,uint256)\":{\"params\":{\"account\":\"The account will recieve the money\",\"amount\":\"The number of token will sent to the account (is already *1e18)\"}},\"mintDirectly(address,uint256,string)\":{\"details\":\"Only the owner can call this function and the state of mint will upgrade\",\"params\":{\"_amount\":\"The number of token will sent to the account\",\"account\":\"The account will recieve the money\",\"typeMining\":\"In base of the type choose between: fondationFee, ecosystem, marketingOinvestiment and developing\"}},\"mintFromMatic()\":{\"details\":\"Based on the number of matic and mint level, the number of tokens to be sent is defined\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"title\":\"BLUE BIRD ERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregatorUpgrade(address)\":{\"notice\":\"AggregatorV3Interface upgrade allows to upgrade the contract from which we take the Matic/USD exchange rate  \"},\"burn(uint256)\":{\"notice\":\"The function allows to burn tokens\"},\"mintBurn(address,uint256)\":{\"notice\":\"The function allows previously burned tokens to be mint\"},\"mintDirectly(address,uint256,string)\":{\"notice\":\"mintDirectly allows the contract owner to distribute the tokens directly to any investors and all other entities. \"},\"mintFromMatic()\":{\"notice\":\"The function allows to mint tokens by sending Matic\"}},\"notice\":\"The contract is write for Marco Liu, creator of BlueBird project. This code had the scope to create a new token ERC20\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlueBird.sol\":\"BlueBird\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/BlueBird.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title BLUE BIRD ERC20\\n * @author Samuele Chiesa\\n * @notice The contract is write for Marco Liu, creator of BlueBird project. This code had the scope to create a new token ERC20\\n * @dev The contract uses openzeppeling lib\\n */\\ncontract BlueBird is ERC20, ERC20Burnable {\\n    /*--- COSTANTS ---*/\\n    address payable private immutable owner;\\n    uint private immutable cap = 1000000000;\\n    bool initialized=false;\\n\\n    /*--- VARIABLES ---*/\\n    uint private burned;\\n    mapping (string=>uint256) public minter4amount;\\n    mapping (string=>uint256) public minter4minted;\\n    uint8[3] private miningPrice = [125,100,50];\\n    AggregatorV3Interface internal priceFeed;\\n\\n    /*--- MODIFIER ---*/\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the owner can call this function\\\");\\n        _;\\n    }\\n    modifier checkMint(string memory typeMining, uint _amount){\\n        if(minter4minted[typeMining]+_amount > minter4amount[typeMining])\\n            revert BlueBird__ErrorMint(typeMining, _amount);\\n        _;\\n    }\\n    modifier checkCap(uint amount){\\n        if((ERC20.totalSupply()) + amount > getCap()*1e18){\\n            revert BlueBird__ErrorERC20Capped();\\n        }\\n        _;\\n    }\\n    modifier checkBalance(uint bilancio,uint amount){\\n        if(bilancio<amount){\\n            revert BlueBird__ErrorBilancio();\\n        }\\n        _;\\n    }\\n\\n    /*--- ERROR ---*/\\n    error BlueBird__ErrorMint(string, uint);\\n    error BlueBird__ErrorERC20Capped();\\n    error BlueBird__ErrorCall();\\n    error BlueBird__ErrorBilancio();\\n\\n    /*--- EVENTS ---*/\\n    event aggregatorUpgradeEvent(address);\\n    event mintFromMaticEvent(address, uint, uint);\\n    event mintDirectlyEvent(address, uint, string);\\n    event burnEvent(address, uint);\\n    event mintBurnEvent(address, uint);\\n\\n    /*--- CONSTRUCTOR ---*/\\n    /**\\n     * @dev In the constructor are define the mint cap for each entites and the mint state\\n     * @param priceFeedAdd Address AggregatorV3Interface\\n     */ \\n    constructor(address priceFeedAdd) ERC20(\\\"BlueBird\\\", \\\"BBD\\\"){\\n        owner = payable(msg.sender);\\n        minter4amount[\\\"fondationFee\\\"] = cap*8/100;\\n        minter4amount[\\\"ecosystem\\\"] = cap*58/100;\\n        minter4amount[\\\"marketingOinvestiment\\\"] = cap*24/100;\\n        minter4amount[\\\"consulting\\\"] = cap*10/100;\\n\\n        minter4minted[\\\"fondationFee\\\"] = cap*8/100*2/100;\\n        minter4minted[\\\"ecosystem\\\"] = 0;\\n        minter4minted[\\\"marketingOinvestiment\\\"] = 0;\\n        minter4minted[\\\"consulting\\\"] = 0;\\n\\n        priceFeed = AggregatorV3Interface(priceFeedAdd);\\n        _mint(owner, cap*8/100*2/100*1e18);\\n    }\\n\\n    /*--- FUNCTION ---*/\\n\\n    // AGGREGATOR UPGRADE\\n    /**\\n     * @notice AggregatorV3Interface upgrade allows to upgrade the contract from which we take the Matic/USD exchange rate  \\n     * @dev AggregatorV3Interface is the base of the mint from Matic\\n     * @param newpriceFeedAdd New address AggregatorV3Interface\\n     */ \\n    function aggregatorUpgrade(address newpriceFeedAdd) public onlyOwner {\\n        priceFeed = AggregatorV3Interface(newpriceFeedAdd);\\n        emit aggregatorUpgradeEvent(newpriceFeedAdd);\\n    }\\n\\n    // MINT FUNCTION\\n    /**\\n     * @notice mintDirectly allows the contract owner to distribute the tokens directly to any investors and all other entities. \\n     * @dev Only the owner can call this function and the state of mint will upgrade\\n     * @param account The account will recieve the money\\n     * @param _amount The number of token will sent to the account\\n     * @param typeMining In base of the type choose between: fondationFee, ecosystem, marketingOinvestiment and developing\\n     */ \\n    function mintDirectly(address account, uint256 _amount, string memory typeMining) public onlyOwner checkMint(typeMining,_amount) {\\n        minter4minted[typeMining] = minter4minted[typeMining]+_amount;\\n        _mint(account,_amount*1e18);\\n        emit mintDirectlyEvent(account, _amount, typeMining);\\n    }\\n\\n    /**\\n     * @notice The function allows to mint tokens by sending Matic\\n     * @dev Based on the number of matic and mint level, the number of tokens to be sent is defined\\n     */ \\n    // NB: il prezzo di mint dipende dal prezzo a cui si \\u00e8 arrivati nel momento del mint, \\n    //      se un acquisto dovesse andare a cavallo su due 2 fasce di prezzo viene presa quella inferiore\\n    function mintFromMatic() external payable checkBalance(address(msg.sender).balance,msg.value){\\n        uint value1 = msg.value;\\n        uint mintPrice;\\n        if(minter4minted[\\\"ecosystem\\\"]<getCap()*25/100/1e18){\\n            mintPrice = mintTokenAmount(0);\\n        } else if (minter4minted[\\\"ecosystem\\\"]<getCap()*15/100/1e18+getCap()*25/100/1e18){\\n            mintPrice = mintTokenAmount(1);\\n        } else {\\n            mintPrice = mintTokenAmount(2);\\n        }\\n        (bool callSuccess,) = owner.call{value: msg.value}('');\\n        if(!callSuccess){\\n            revert BlueBird__ErrorCall();\\n        }\\n\\n        uint valueMint = mintPrice*value1/1e18;\\n        minter4minted[\\\"ecosystem\\\"] = minter4minted[\\\"ecosystem\\\"]+uint(valueMint);\\n        _mint(msg.sender,valueMint);\\n        emit mintFromMaticEvent(msg.sender, valueMint/1e18, mintPrice);\\n\\n    }\\n\\n    /**\\n     * @dev Private function uses for define amount of token from an amount of matic\\n     */ \\n    function mintTokenAmount(uint8 n) private view returns(uint){\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        uint maticUsd = uint256(answer * 10000000000);\\n        uint price = miningPrice[n];\\n        uint mintPrice = maticUsd*price;\\n        if(minter4minted[\\\"ecosystem\\\"]*1e18+ mintPrice > minter4amount[\\\"ecosystem\\\"]*1e18){\\n            revert BlueBird__ErrorMint(\\\"ecosystem\\\",mintPrice/1e18);\\n        }\\n        return mintPrice;\\n    }\\n\\n    /**\\n     * @dev Override of ERC20\\n     */ \\n    function _mint(address account, uint256 amount) internal virtual override(ERC20) checkCap(amount) {\\n        super._mint(account, amount);\\n    }\\n\\n    // DESTROY FUNCTION\\n    function destroy() public onlyOwner {\\n        selfdestruct(owner);\\n    }\\n\\n    //BURN FUNCTION\\n    /**\\n     * @notice The function allows to burn tokens\\n     * @param amount The number of token will burn is already*1e18\\n     */ \\n    function burn(uint256 amount) public override(ERC20Burnable) checkBalance(balanceOf(msg.sender),amount){\\n        burned = burned+amount;\\n        _burn(msg.sender, amount);//* (10 ** decimals())\\n        emit burnEvent(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice The function allows previously burned tokens to be mint\\n     * @param account The account will recieve the money\\n     * @param amount The number of token will sent to the account (is already *1e18)\\n     */ \\n    function mintBurn(address account,uint256 amount) public onlyOwner checkBalance(burned,amount){\\n        burned = burned-amount;\\n        _mint(account, amount);\\n        emit mintBurnEvent(account, amount);\\n    }\\n\\n    // GET FUNCTION\\n    /**\\n     * @return return the maximum capilazation\\n     */ \\n    function getCap() public view returns (uint256) {\\n        return cap* (10 ** decimals());\\n    }\\n\\n    /**\\n     * @return return the owner of the contract\\n     */ \\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @return return the owner of the contract\\n     */ \\n    function getBurned() public view returns (uint) {\\n        return burned;\\n    }\\n\\n    /**\\n     * @dev The function are create for the test\\n     */ \\n    function getMinter4amount() public view returns(uint, uint, uint, uint){\\n        return (\\n            minter4amount[\\\"fondationFee\\\"],\\n            minter4amount[\\\"ecosystem\\\"],\\n            minter4amount[\\\"marketingOinvestiment\\\"],\\n            minter4amount[\\\"consulting\\\"]\\n        );\\n    }\\n\\n    /**\\n     * @dev The function are create for the test\\n     */ \\n    function getMinter4minted() public view returns(uint, uint, uint, uint){\\n        return (\\n            minter4minted[\\\"fondationFee\\\"],\\n            minter4minted[\\\"ecosystem\\\"],\\n            minter4minted[\\\"marketingOinvestiment\\\"],\\n            minter4minted[\\\"consulting\\\"]\\n        );\\n    }\\n\\n    /**\\n     * @dev The function are create for the test\\n     */ \\n    function getMaticRate() public view returns(uint result){\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        result = uint256(answer * 10000000000);\\n    }\\n\\n    \\n    /**\\n     * @dev The function are create for the test\\n     */ \\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return priceFeed;\\n    }\\n}\",\"keccak256\":\"0xfdc8113dce497a23a5bc714cc42649e2004dceb316341a84d839c70c37eff85e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052633b9aca0060a0908152506000600560006101000a81548160ff0219169083151502179055506040518060600160405280607d60ff168152602001606460ff168152602001603260ff168152506009906003620000639291906200063f565b503480156200007157600080fd5b50604051620042aa380380620042aa8339818101604052810190620000979190620007fa565b6040518060400160405280600881526020017f426c7565426972640000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f424244000000000000000000000000000000000000000000000000000000000081525081600390805190602001906200011b929190620006e0565b50806004908051906020019062000134929190620006e0565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506064600860a0516200017e919062000865565b6200018a9190620008f5565b60076040516200019a9062000988565b9081526020016040518091039020819055506064603a60a051620001bf919062000865565b620001cb9190620008f5565b6007604051620001db90620009ef565b9081526020016040518091039020819055506064601860a05162000200919062000865565b6200020c9190620008f5565b60076040516200021c9062000a56565b9081526020016040518091039020819055506064600a60a05162000241919062000865565b6200024d9190620008f5565b60076040516200025d9062000abd565b908152602001604051809103902081905550606460026064600860a05162000286919062000865565b620002929190620008f5565b6200029e919062000865565b620002aa9190620008f5565b6008604051620002ba9062000988565b90815260200160405180910390208190555060006008604051620002de90620009ef565b90815260200160405180910390208190555060006008604051620003029062000a56565b90815260200160405180910390208190555060006008604051620003269062000abd565b90815260200160405180910390208190555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003dc608051670de0b6b3a7640000606460026064600860a051620003a0919062000865565b620003ac9190620008f5565b620003b8919062000865565b620003c49190620008f5565b620003d0919062000865565b620003e360201b60201c565b5062000df9565b80670de0b6b3a7640000620003fd6200048060201b60201c565b62000409919062000865565b816200041f620004b460201b620009991760201c565b6200042b919062000ad4565b111562000464576040517f3e05993300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6200047b8383620004be60201b6200150d1760201c565b505050565b6000620004926200062c60201b60201c565b600a620004a0919062000c92565b60a051620004af919062000865565b905090565b6000600254905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000531576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005289062000d44565b60405180910390fd5b62000545600083836200063560201b60201c565b806002600082825462000559919062000ad4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200060c919062000d77565b60405180910390a362000628600083836200063a60201b60201c565b5050565b60006012905090565b505050565b505050565b826003601f01602090048101928215620006cd5791602002820160005b838211156200069c57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026200065c565b8015620006cb5782816101000a81549060ff02191690556001016020816000010492830192600103026200069c565b505b509050620006dc919062000771565b5090565b828054620006ee9062000dc3565b90600052602060002090601f0160209004810192826200071257600085556200075e565b82601f106200072d57805160ff19168380011785556200075e565b828001600101855582156200075e579182015b828111156200075d57825182559160200191906001019062000740565b5b5090506200076d919062000771565b5090565b5b808211156200078c57600081600090555060010162000772565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620007c28262000795565b9050919050565b620007d481620007b5565b8114620007e057600080fd5b50565b600081519050620007f481620007c9565b92915050565b60006020828403121562000813576200081262000790565b5b60006200082384828501620007e3565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000872826200082c565b91506200087f836200082c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620008bb57620008ba62000836565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000902826200082c565b91506200090f836200082c565b925082620009225762000921620008c6565b5b828204905092915050565b600081905092915050565b7f666f6e646174696f6e4665650000000000000000000000000000000000000000600082015250565b600062000970600c836200092d565b91506200097d8262000938565b600c82019050919050565b6000620009958262000961565b9150819050919050565b7f65636f73797374656d0000000000000000000000000000000000000000000000600082015250565b6000620009d76009836200092d565b9150620009e4826200099f565b600982019050919050565b6000620009fc82620009c8565b9150819050919050565b7f6d61726b6574696e674f696e76657374696d656e740000000000000000000000600082015250565b600062000a3e6015836200092d565b915062000a4b8262000a06565b601582019050919050565b600062000a638262000a2f565b9150819050919050565b7f636f6e73756c74696e6700000000000000000000000000000000000000000000600082015250565b600062000aa5600a836200092d565b915062000ab28262000a6d565b600a82019050919050565b600062000aca8262000a96565b9150819050919050565b600062000ae1826200082c565b915062000aee836200082c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000b265762000b2562000836565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b600185111562000b905780860481111562000b685762000b6762000836565b5b600185161562000b785780820291505b808102905062000b888562000b31565b945062000b48565b94509492505050565b60008262000bab576001905062000c7e565b8162000bbb576000905062000c7e565b816001811462000bd4576002811462000bdf5762000c15565b600191505062000c7e565b60ff84111562000bf45762000bf362000836565b5b8360020a91508482111562000c0e5762000c0d62000836565b5b5062000c7e565b5060208310610133831016604e8410600b841016171562000c4f5782820a90508381111562000c495762000c4862000836565b5b62000c7e565b62000c5e848484600162000b3e565b9250905081840481111562000c785762000c7762000836565b5b81810290505b9392505050565b600060ff82169050919050565b600062000c9f826200082c565b915062000cac8362000c85565b925062000cdb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000b99565b905092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000d2c601f8362000ce3565b915062000d398262000cf4565b602082019050919050565b6000602082019050818103600083015262000d5f8162000d1d565b9050919050565b62000d71816200082c565b82525050565b600060208201905062000d8e600083018462000d66565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000ddc57607f821691505b6020821081141562000df35762000df262000d94565b5b50919050565b60805160a05161346162000e496000396000610eb90152600081816107d201528181610b4901528181610f5b01528181611084015281816111120152818161114d01526112b701526134616000f3fe60806040526004361061019c5760003560e01c80636fea47e3116100ec57806395d89b411161008a578063a457c2d711610064578063a457c2d71461059f578063a9059cbb146105dc578063cdc8510f14610619578063dd62ed3e146106565761019c565b806395d89b41146105205780639e87a5cd1461054b578063a42f5373146105765761019c565b80637d4387a6116100c65780637d4387a61461048757806383197ef0146104b0578063893d20e8146104c75780638bc82c95146104f25761019c565b80636fea47e3146103f657806370a082311461042157806379cc67901461045e5761019c565b806327dea227116101595780633950935111610133578063395093511461032857806342966c681461036557806343a4fac81461038e578063554d578d146103cb5761019c565b806327dea227146102c8578063313ce567146102d2578063341f1f63146102fd5761019c565b806305808a29146101a157806306fdde03146101cf578063095ea7b3146101fa5780631611d50b1461023757806318160ddd1461026057806323b872dd1461028b575b600080fd5b3480156101ad57600080fd5b506101b6610693565b6040516101c69493929190611f71565b60405180910390f35b3480156101db57600080fd5b506101e461071b565b6040516101f1919061204f565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c919061210f565b6107ad565b60405161022e919061216a565b60405180910390f35b34801561024357600080fd5b5061025e600480360381019061025991906122ba565b6107d0565b005b34801561026c57600080fd5b50610275610999565b6040516102829190612329565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190612344565b6109a3565b6040516102bf919061216a565b60405180910390f35b6102d06109d2565b005b3480156102de57600080fd5b506102e7610cd3565b6040516102f491906123b3565b60405180910390f35b34801561030957600080fd5b50610312610cdc565b60405161031f9190612329565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a919061210f565b610d9c565b60405161035c919061216a565b60405180910390f35b34801561037157600080fd5b5061038c600480360381019061038791906123ce565b610dd3565b005b34801561039a57600080fd5b506103b560048036038101906103b091906123fb565b610e73565b6040516103c29190612329565b60405180910390f35b3480156103d757600080fd5b506103e0610ea1565b6040516103ed9190612329565b60405180910390f35b34801561040257600080fd5b5061040b610ee7565b6040516104189190612329565b60405180910390f35b34801561042d57600080fd5b5061044860048036038101906104439190612444565b610ef1565b6040516104559190612329565b60405180910390f35b34801561046a57600080fd5b506104856004803603810190610480919061210f565b610f39565b005b34801561049357600080fd5b506104ae60048036038101906104a9919061210f565b610f59565b005b3480156104bc57600080fd5b506104c5611082565b005b3480156104d357600080fd5b506104dc611149565b6040516104e99190612480565b60405180910390f35b3480156104fe57600080fd5b50610507611171565b6040516105179493929190611f71565b60405180910390f35b34801561052c57600080fd5b506105356111f9565b604051610542919061204f565b60405180910390f35b34801561055757600080fd5b5061056061128b565b60405161056d91906124fa565b60405180910390f35b34801561058257600080fd5b5061059d60048036038101906105989190612444565b6112b5565b005b3480156105ab57600080fd5b506105c660048036038101906105c1919061210f565b6113be565b6040516105d3919061216a565b60405180910390f35b3480156105e857600080fd5b5061060360048036038101906105fe919061210f565b611435565b604051610610919061216a565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b91906123fb565b611458565b60405161064d9190612329565b60405180910390f35b34801561066257600080fd5b5061067d60048036038101906106789190612515565b611486565b60405161068a9190612329565b60405180910390f35b60008060008060076040516106a7906125ac565b90815260200160405180910390205460076040516106c49061260d565b90815260200160405180910390205460076040516106e19061266e565b90815260200160405180910390205460076040516106fe906126cf565b908152602001604051809103902054935093509350935090919293565b60606003805461072a90612713565b80601f016020809104026020016040519081016040528092919081815260200182805461075690612713565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050905090565b6000806107b8611664565b90506107c581858561166c565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610855906127b7565b60405180910390fd5b80826007826040516108709190612808565b908152602001604051809103902054816008846040516108909190612808565b9081526020016040518091039020546108a9919061284e565b11156108ee5781816040517fe8379cc40000000000000000000000000000000000000000000000000000000081526004016108e59291906128a4565b60405180910390fd5b836008846040516108ff9190612808565b908152602001604051809103902054610918919061284e565b6008846040516109289190612808565b90815260200160405180910390208190555061095785670de0b6b3a76400008661095291906128d4565b611837565b7f2e01b6cac1db8ec7bbba20f52c7971dd718808586f301d3ef4c44df26e9cd21f85858560405161098a9392919061292e565b60405180910390a15050505050565b6000600254905090565b6000806109ae611664565b90506109bb8582856118ad565b6109c6858585611939565b60019150509392505050565b3373ffffffffffffffffffffffffffffffffffffffff16313480821015610a25576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003490506000670de0b6b3a764000060646019610a41610ea1565b610a4b91906128d4565b610a55919061299b565b610a5f919061299b565b6008604051610a6d9061260d565b9081526020016040518091039020541015610a9357610a8c6000611bb1565b9050610b45565b670de0b6b3a764000060646019610aa8610ea1565b610ab291906128d4565b610abc919061299b565b610ac6919061299b565b670de0b6b3a76400006064600f610adb610ea1565b610ae591906128d4565b610aef919061299b565b610af9919061299b565b610b03919061284e565b6008604051610b119061260d565b9081526020016040518091039020541015610b3757610b306001611bb1565b9050610b44565b610b416002611bb1565b90505b5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1634604051610b8b906129fd565b60006040518083038185875af1925050503d8060008114610bc8576040519150601f19603f3d011682016040523d82523d6000602084013e610bcd565b606091505b5050905080610c08576040517fa81dc2e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000670de0b6b3a76400008484610c1f91906128d4565b610c29919061299b565b9050806008604051610c3a9061260d565b908152602001604051809103902054610c53919061284e565b6008604051610c619061260d565b908152602001604051809103902081905550610c7d3382611837565b7fd69dd5c77c111946fad2dbb4a9f28e2ea0f77d1e9c1223a2ac8a787a3cadbc8e33670de0b6b3a764000083610cb3919061299b565b85604051610cc393929190612a12565b60405180910390a1505050505050565b60006012905090565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f9190612ad6565b5050509150506402540be40081610d969190612b51565b91505090565b600080610da7611664565b9050610dc8818585610db98589611486565b610dc3919061284e565b61166c565b600191505092915050565b610ddc33610ef1565b8180821015610e17576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600654610e25919061284e565b600681905550610e353384611d80565b7fda4e31583a2259fe317cadb7a8df04c4ff0072abd596ee177b39d24894a2ec6b3384604051610e66929190612c68565b60405180910390a1505050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000610eab610cd3565b600a610eb79190612dc4565b7f0000000000000000000000000000000000000000000000000000000000000000610ee291906128d4565b905090565b6000600654905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f4b82610f45611664565b836118ad565b610f558282611d80565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fe7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fde906127b7565b60405180910390fd5b6006548180821015611025576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826006546110339190612e0f565b6006819055506110438484611837565b7f498789b97a924d6566d2d756b70ef5ea7f0720f0e6ed51845c77eda0afa092cb8484604051611074929190612c68565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611110576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611107906127b7565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16ff5b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806000806008604051611185906125ac565b90815260200160405180910390205460086040516111a29061260d565b90815260200160405180910390205460086040516111bf9061266e565b90815260200160405180910390205460086040516111dc906126cf565b908152602001604051809103902054935093509350935090919293565b60606004805461120890612713565b80601f016020809104026020016040519081016040528092919081815260200182805461123490612713565b80156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b5050505050905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133a906127b7565b60405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c8ac2008786a97973d123ada788ee2512dac4139ac736ef2994f2b3288d99b5816040516113b39190612480565b60405180910390a150565b6000806113c9611664565b905060006113d78286611486565b90508381101561141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390612eb5565b60405180910390fd5b611429828686840361166c565b60019250505092915050565b600080611440611664565b905061144d818585611939565b600191505092915050565b6008818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561157d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157490612f21565b60405180910390fd5b61158960008383611f4e565b806002600082825461159b919061284e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161164c9190612329565b60405180910390a361166060008383611f53565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d390612fb3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561174c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174390613045565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161182a9190612329565b60405180910390a3505050565b80670de0b6b3a7640000611849610ea1565b61185391906128d4565b8161185c610999565b611866919061284e565b111561189e576040517f3e05993300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118a8838361150d565b505050565b60006118b98484611486565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146119335781811015611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191c906130b1565b60405180910390fd5b611932848484840361166c565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a090613143565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a10906131d5565b60405180910390fd5b611a24838383611f4e565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa190613267565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b989190612329565b60405180910390a3611bab848484611f53565b50505050565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611c1c57600080fd5b505afa158015611c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c549190612ad6565b50505091505060006402540be40082611c6d9190612b51565b9050600060098560ff1660038110611c8857611c87613287565b5b602091828204019190069054906101000a900460ff1660ff16905060008183611cb191906128d4565b9050670de0b6b3a76400006007604051611cca9061260d565b908152602001604051809103902054611ce391906128d4565b81670de0b6b3a76400006008604051611cfb9061260d565b908152602001604051809103902054611d1491906128d4565b611d1e919061284e565b1115611d7457670de0b6b3a764000081611d38919061299b565b6040517fe8379cc4000000000000000000000000000000000000000000000000000000008152600401611d6b91906132d9565b60405180910390fd5b80945050505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611df0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de790613379565b60405180910390fd5b611dfc82600083611f4e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e799061340b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611f359190612329565b60405180910390a3611f4983600084611f53565b505050565b505050565b505050565b6000819050919050565b611f6b81611f58565b82525050565b6000608082019050611f866000830187611f62565b611f936020830186611f62565b611fa06040830185611f62565b611fad6060830184611f62565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ff0578082015181840152602081019050611fd5565b83811115611fff576000848401525b50505050565b6000601f19601f8301169050919050565b600061202182611fb6565b61202b8185611fc1565b935061203b818560208601611fd2565b61204481612005565b840191505092915050565b600060208201905081810360008301526120698184612016565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120b082612085565b9050919050565b6120c0816120a5565b81146120cb57600080fd5b50565b6000813590506120dd816120b7565b92915050565b6120ec81611f58565b81146120f757600080fd5b50565b600081359050612109816120e3565b92915050565b600080604083850312156121265761212561207b565b5b6000612134858286016120ce565b9250506020612145858286016120fa565b9150509250929050565b60008115159050919050565b6121648161214f565b82525050565b600060208201905061217f600083018461215b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121c782612005565b810181811067ffffffffffffffff821117156121e6576121e561218f565b5b80604052505050565b60006121f9612071565b905061220582826121be565b919050565b600067ffffffffffffffff8211156122255761222461218f565b5b61222e82612005565b9050602081019050919050565b82818337600083830152505050565b600061225d6122588461220a565b6121ef565b9050828152602081018484840111156122795761227861218a565b5b61228484828561223b565b509392505050565b600082601f8301126122a1576122a0612185565b5b81356122b184826020860161224a565b91505092915050565b6000806000606084860312156122d3576122d261207b565b5b60006122e1868287016120ce565b93505060206122f2868287016120fa565b925050604084013567ffffffffffffffff81111561231357612312612080565b5b61231f8682870161228c565b9150509250925092565b600060208201905061233e6000830184611f62565b92915050565b60008060006060848603121561235d5761235c61207b565b5b600061236b868287016120ce565b935050602061237c868287016120ce565b925050604061238d868287016120fa565b9150509250925092565b600060ff82169050919050565b6123ad81612397565b82525050565b60006020820190506123c860008301846123a4565b92915050565b6000602082840312156123e4576123e361207b565b5b60006123f2848285016120fa565b91505092915050565b6000602082840312156124115761241061207b565b5b600082013567ffffffffffffffff81111561242f5761242e612080565b5b61243b8482850161228c565b91505092915050565b60006020828403121561245a5761245961207b565b5b6000612468848285016120ce565b91505092915050565b61247a816120a5565b82525050565b60006020820190506124956000830184612471565b92915050565b6000819050919050565b60006124c06124bb6124b684612085565b61249b565b612085565b9050919050565b60006124d2826124a5565b9050919050565b60006124e4826124c7565b9050919050565b6124f4816124d9565b82525050565b600060208201905061250f60008301846124eb565b92915050565b6000806040838503121561252c5761252b61207b565b5b600061253a858286016120ce565b925050602061254b858286016120ce565b9150509250929050565b600081905092915050565b7f666f6e646174696f6e4665650000000000000000000000000000000000000000600082015250565b6000612596600c83612555565b91506125a182612560565b600c82019050919050565b60006125b782612589565b9150819050919050565b7f65636f73797374656d0000000000000000000000000000000000000000000000600082015250565b60006125f7600983612555565b9150612602826125c1565b600982019050919050565b6000612618826125ea565b9150819050919050565b7f6d61726b6574696e674f696e76657374696d656e740000000000000000000000600082015250565b6000612658601583612555565b915061266382612622565b601582019050919050565b60006126798261264b565b9150819050919050565b7f636f6e73756c74696e6700000000000000000000000000000000000000000000600082015250565b60006126b9600a83612555565b91506126c482612683565b600a82019050919050565b60006126da826126ac565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061272b57607f821691505b6020821081141561273f5761273e6126e4565b5b50919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b60006127a1602583611fc1565b91506127ac82612745565b604082019050919050565b600060208201905081810360008301526127d081612794565b9050919050565b60006127e282611fb6565b6127ec8185612555565b93506127fc818560208601611fd2565b80840191505092915050565b600061281482846127d7565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061285982611f58565b915061286483611f58565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128995761289861281f565b5b828201905092915050565b600060408201905081810360008301526128be8185612016565b90506128cd6020830184611f62565b9392505050565b60006128df82611f58565b91506128ea83611f58565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156129235761292261281f565b5b828202905092915050565b60006060820190506129436000830186612471565b6129506020830185611f62565b81810360408301526129628184612016565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006129a682611f58565b91506129b183611f58565b9250826129c1576129c061296c565b5b828204905092915050565b600081905092915050565b50565b60006129e76000836129cc565b91506129f2826129d7565b600082019050919050565b6000612a08826129da565b9150819050919050565b6000606082019050612a276000830186612471565b612a346020830185611f62565b612a416040830184611f62565b949350505050565b600069ffffffffffffffffffff82169050919050565b612a6881612a49565b8114612a7357600080fd5b50565b600081519050612a8581612a5f565b92915050565b6000819050919050565b612a9e81612a8b565b8114612aa957600080fd5b50565b600081519050612abb81612a95565b92915050565b600081519050612ad0816120e3565b92915050565b600080600080600060a08688031215612af257612af161207b565b5b6000612b0088828901612a76565b9550506020612b1188828901612aac565b9450506040612b2288828901612ac1565b9350506060612b3388828901612ac1565b9250506080612b4488828901612a76565b9150509295509295909350565b6000612b5c82612a8b565b9150612b6783612a8b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612ba657612ba561281f565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612be357612be261281f565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612c2057612c1f61281f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612c5d57612c5c61281f565b5b828202905092915050565b6000604082019050612c7d6000830185612471565b612c8a6020830184611f62565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115612ce857808604811115612cc457612cc361281f565b5b6001851615612cd35780820291505b8081029050612ce185612c91565b9450612ca8565b94509492505050565b600082612d015760019050612dbd565b81612d0f5760009050612dbd565b8160018114612d255760028114612d2f57612d5e565b6001915050612dbd565b60ff841115612d4157612d4061281f565b5b8360020a915084821115612d5857612d5761281f565b5b50612dbd565b5060208310610133831016604e8410600b8410161715612d935782820a905083811115612d8e57612d8d61281f565b5b612dbd565b612da08484846001612c9e565b92509050818404811115612db757612db661281f565b5b81810290505b9392505050565b6000612dcf82611f58565b9150612dda83612397565b9250612e077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612cf1565b905092915050565b6000612e1a82611f58565b9150612e2583611f58565b925082821015612e3857612e3761281f565b5b828203905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612e9f602583611fc1565b9150612eaa82612e43565b604082019050919050565b60006020820190508181036000830152612ece81612e92565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612f0b601f83611fc1565b9150612f1682612ed5565b602082019050919050565b60006020820190508181036000830152612f3a81612efe565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612f9d602483611fc1565b9150612fa882612f41565b604082019050919050565b60006020820190508181036000830152612fcc81612f90565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061302f602283611fc1565b915061303a82612fd3565b604082019050919050565b6000602082019050818103600083015261305e81613022565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061309b601d83611fc1565b91506130a682613065565b602082019050919050565b600060208201905081810360008301526130ca8161308e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061312d602583611fc1565b9150613138826130d1565b604082019050919050565b6000602082019050818103600083015261315c81613120565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006131bf602383611fc1565b91506131ca82613163565b604082019050919050565b600060208201905081810360008301526131ee816131b2565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613251602683611fc1565b915061325c826131f5565b604082019050919050565b6000602082019050818103600083015261328081613244565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006132c3600983611fc1565b91506132ce826125c1565b602082019050919050565b600060408201905081810360008301526132f2816132b6565b90506133016020830184611f62565b92915050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613363602183611fc1565b915061336e82613307565b604082019050919050565b6000602082019050818103600083015261339281613356565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006133f5602283611fc1565b915061340082613399565b604082019050919050565b60006020820190508181036000830152613424816133e8565b905091905056fea2646970667358221220bde86cf39969dea14581cc26f0fec3f1a47d396eb2a39660342dfd31f5c5e2cd64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80636fea47e3116100ec57806395d89b411161008a578063a457c2d711610064578063a457c2d71461059f578063a9059cbb146105dc578063cdc8510f14610619578063dd62ed3e146106565761019c565b806395d89b41146105205780639e87a5cd1461054b578063a42f5373146105765761019c565b80637d4387a6116100c65780637d4387a61461048757806383197ef0146104b0578063893d20e8146104c75780638bc82c95146104f25761019c565b80636fea47e3146103f657806370a082311461042157806379cc67901461045e5761019c565b806327dea227116101595780633950935111610133578063395093511461032857806342966c681461036557806343a4fac81461038e578063554d578d146103cb5761019c565b806327dea227146102c8578063313ce567146102d2578063341f1f63146102fd5761019c565b806305808a29146101a157806306fdde03146101cf578063095ea7b3146101fa5780631611d50b1461023757806318160ddd1461026057806323b872dd1461028b575b600080fd5b3480156101ad57600080fd5b506101b6610693565b6040516101c69493929190611f71565b60405180910390f35b3480156101db57600080fd5b506101e461071b565b6040516101f1919061204f565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c919061210f565b6107ad565b60405161022e919061216a565b60405180910390f35b34801561024357600080fd5b5061025e600480360381019061025991906122ba565b6107d0565b005b34801561026c57600080fd5b50610275610999565b6040516102829190612329565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190612344565b6109a3565b6040516102bf919061216a565b60405180910390f35b6102d06109d2565b005b3480156102de57600080fd5b506102e7610cd3565b6040516102f491906123b3565b60405180910390f35b34801561030957600080fd5b50610312610cdc565b60405161031f9190612329565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a919061210f565b610d9c565b60405161035c919061216a565b60405180910390f35b34801561037157600080fd5b5061038c600480360381019061038791906123ce565b610dd3565b005b34801561039a57600080fd5b506103b560048036038101906103b091906123fb565b610e73565b6040516103c29190612329565b60405180910390f35b3480156103d757600080fd5b506103e0610ea1565b6040516103ed9190612329565b60405180910390f35b34801561040257600080fd5b5061040b610ee7565b6040516104189190612329565b60405180910390f35b34801561042d57600080fd5b5061044860048036038101906104439190612444565b610ef1565b6040516104559190612329565b60405180910390f35b34801561046a57600080fd5b506104856004803603810190610480919061210f565b610f39565b005b34801561049357600080fd5b506104ae60048036038101906104a9919061210f565b610f59565b005b3480156104bc57600080fd5b506104c5611082565b005b3480156104d357600080fd5b506104dc611149565b6040516104e99190612480565b60405180910390f35b3480156104fe57600080fd5b50610507611171565b6040516105179493929190611f71565b60405180910390f35b34801561052c57600080fd5b506105356111f9565b604051610542919061204f565b60405180910390f35b34801561055757600080fd5b5061056061128b565b60405161056d91906124fa565b60405180910390f35b34801561058257600080fd5b5061059d60048036038101906105989190612444565b6112b5565b005b3480156105ab57600080fd5b506105c660048036038101906105c1919061210f565b6113be565b6040516105d3919061216a565b60405180910390f35b3480156105e857600080fd5b5061060360048036038101906105fe919061210f565b611435565b604051610610919061216a565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b91906123fb565b611458565b60405161064d9190612329565b60405180910390f35b34801561066257600080fd5b5061067d60048036038101906106789190612515565b611486565b60405161068a9190612329565b60405180910390f35b60008060008060076040516106a7906125ac565b90815260200160405180910390205460076040516106c49061260d565b90815260200160405180910390205460076040516106e19061266e565b90815260200160405180910390205460076040516106fe906126cf565b908152602001604051809103902054935093509350935090919293565b60606003805461072a90612713565b80601f016020809104026020016040519081016040528092919081815260200182805461075690612713565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050905090565b6000806107b8611664565b90506107c581858561166c565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610855906127b7565b60405180910390fd5b80826007826040516108709190612808565b908152602001604051809103902054816008846040516108909190612808565b9081526020016040518091039020546108a9919061284e565b11156108ee5781816040517fe8379cc40000000000000000000000000000000000000000000000000000000081526004016108e59291906128a4565b60405180910390fd5b836008846040516108ff9190612808565b908152602001604051809103902054610918919061284e565b6008846040516109289190612808565b90815260200160405180910390208190555061095785670de0b6b3a76400008661095291906128d4565b611837565b7f2e01b6cac1db8ec7bbba20f52c7971dd718808586f301d3ef4c44df26e9cd21f85858560405161098a9392919061292e565b60405180910390a15050505050565b6000600254905090565b6000806109ae611664565b90506109bb8582856118ad565b6109c6858585611939565b60019150509392505050565b3373ffffffffffffffffffffffffffffffffffffffff16313480821015610a25576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003490506000670de0b6b3a764000060646019610a41610ea1565b610a4b91906128d4565b610a55919061299b565b610a5f919061299b565b6008604051610a6d9061260d565b9081526020016040518091039020541015610a9357610a8c6000611bb1565b9050610b45565b670de0b6b3a764000060646019610aa8610ea1565b610ab291906128d4565b610abc919061299b565b610ac6919061299b565b670de0b6b3a76400006064600f610adb610ea1565b610ae591906128d4565b610aef919061299b565b610af9919061299b565b610b03919061284e565b6008604051610b119061260d565b9081526020016040518091039020541015610b3757610b306001611bb1565b9050610b44565b610b416002611bb1565b90505b5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1634604051610b8b906129fd565b60006040518083038185875af1925050503d8060008114610bc8576040519150601f19603f3d011682016040523d82523d6000602084013e610bcd565b606091505b5050905080610c08576040517fa81dc2e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000670de0b6b3a76400008484610c1f91906128d4565b610c29919061299b565b9050806008604051610c3a9061260d565b908152602001604051809103902054610c53919061284e565b6008604051610c619061260d565b908152602001604051809103902081905550610c7d3382611837565b7fd69dd5c77c111946fad2dbb4a9f28e2ea0f77d1e9c1223a2ac8a787a3cadbc8e33670de0b6b3a764000083610cb3919061299b565b85604051610cc393929190612a12565b60405180910390a1505050505050565b60006012905090565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610d4757600080fd5b505afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f9190612ad6565b5050509150506402540be40081610d969190612b51565b91505090565b600080610da7611664565b9050610dc8818585610db98589611486565b610dc3919061284e565b61166c565b600191505092915050565b610ddc33610ef1565b8180821015610e17576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600654610e25919061284e565b600681905550610e353384611d80565b7fda4e31583a2259fe317cadb7a8df04c4ff0072abd596ee177b39d24894a2ec6b3384604051610e66929190612c68565b60405180910390a1505050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000610eab610cd3565b600a610eb79190612dc4565b7f0000000000000000000000000000000000000000000000000000000000000000610ee291906128d4565b905090565b6000600654905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610f4b82610f45611664565b836118ad565b610f558282611d80565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fe7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fde906127b7565b60405180910390fd5b6006548180821015611025576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826006546110339190612e0f565b6006819055506110438484611837565b7f498789b97a924d6566d2d756b70ef5ea7f0720f0e6ed51845c77eda0afa092cb8484604051611074929190612c68565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611110576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611107906127b7565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16ff5b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806000806008604051611185906125ac565b90815260200160405180910390205460086040516111a29061260d565b90815260200160405180910390205460086040516111bf9061266e565b90815260200160405180910390205460086040516111dc906126cf565b908152602001604051809103902054935093509350935090919293565b60606004805461120890612713565b80601f016020809104026020016040519081016040528092919081815260200182805461123490612713565b80156112815780601f1061125657610100808354040283529160200191611281565b820191906000526020600020905b81548152906001019060200180831161126457829003601f168201915b5050505050905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133a906127b7565b60405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c8ac2008786a97973d123ada788ee2512dac4139ac736ef2994f2b3288d99b5816040516113b39190612480565b60405180910390a150565b6000806113c9611664565b905060006113d78286611486565b90508381101561141c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141390612eb5565b60405180910390fd5b611429828686840361166c565b60019250505092915050565b600080611440611664565b905061144d818585611939565b600191505092915050565b6008818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561157d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157490612f21565b60405180910390fd5b61158960008383611f4e565b806002600082825461159b919061284e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161164c9190612329565b60405180910390a361166060008383611f53565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d390612fb3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561174c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174390613045565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161182a9190612329565b60405180910390a3505050565b80670de0b6b3a7640000611849610ea1565b61185391906128d4565b8161185c610999565b611866919061284e565b111561189e576040517f3e05993300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118a8838361150d565b505050565b60006118b98484611486565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146119335781811015611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191c906130b1565b60405180910390fd5b611932848484840361166c565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a090613143565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a10906131d5565b60405180910390fd5b611a24838383611f4e565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa190613267565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611b989190612329565b60405180910390a3611bab848484611f53565b50505050565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611c1c57600080fd5b505afa158015611c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c549190612ad6565b50505091505060006402540be40082611c6d9190612b51565b9050600060098560ff1660038110611c8857611c87613287565b5b602091828204019190069054906101000a900460ff1660ff16905060008183611cb191906128d4565b9050670de0b6b3a76400006007604051611cca9061260d565b908152602001604051809103902054611ce391906128d4565b81670de0b6b3a76400006008604051611cfb9061260d565b908152602001604051809103902054611d1491906128d4565b611d1e919061284e565b1115611d7457670de0b6b3a764000081611d38919061299b565b6040517fe8379cc4000000000000000000000000000000000000000000000000000000008152600401611d6b91906132d9565b60405180910390fd5b80945050505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611df0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de790613379565b60405180910390fd5b611dfc82600083611f4e565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e799061340b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611f359190612329565b60405180910390a3611f4983600084611f53565b505050565b505050565b505050565b6000819050919050565b611f6b81611f58565b82525050565b6000608082019050611f866000830187611f62565b611f936020830186611f62565b611fa06040830185611f62565b611fad6060830184611f62565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ff0578082015181840152602081019050611fd5565b83811115611fff576000848401525b50505050565b6000601f19601f8301169050919050565b600061202182611fb6565b61202b8185611fc1565b935061203b818560208601611fd2565b61204481612005565b840191505092915050565b600060208201905081810360008301526120698184612016565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120b082612085565b9050919050565b6120c0816120a5565b81146120cb57600080fd5b50565b6000813590506120dd816120b7565b92915050565b6120ec81611f58565b81146120f757600080fd5b50565b600081359050612109816120e3565b92915050565b600080604083850312156121265761212561207b565b5b6000612134858286016120ce565b9250506020612145858286016120fa565b9150509250929050565b60008115159050919050565b6121648161214f565b82525050565b600060208201905061217f600083018461215b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121c782612005565b810181811067ffffffffffffffff821117156121e6576121e561218f565b5b80604052505050565b60006121f9612071565b905061220582826121be565b919050565b600067ffffffffffffffff8211156122255761222461218f565b5b61222e82612005565b9050602081019050919050565b82818337600083830152505050565b600061225d6122588461220a565b6121ef565b9050828152602081018484840111156122795761227861218a565b5b61228484828561223b565b509392505050565b600082601f8301126122a1576122a0612185565b5b81356122b184826020860161224a565b91505092915050565b6000806000606084860312156122d3576122d261207b565b5b60006122e1868287016120ce565b93505060206122f2868287016120fa565b925050604084013567ffffffffffffffff81111561231357612312612080565b5b61231f8682870161228c565b9150509250925092565b600060208201905061233e6000830184611f62565b92915050565b60008060006060848603121561235d5761235c61207b565b5b600061236b868287016120ce565b935050602061237c868287016120ce565b925050604061238d868287016120fa565b9150509250925092565b600060ff82169050919050565b6123ad81612397565b82525050565b60006020820190506123c860008301846123a4565b92915050565b6000602082840312156123e4576123e361207b565b5b60006123f2848285016120fa565b91505092915050565b6000602082840312156124115761241061207b565b5b600082013567ffffffffffffffff81111561242f5761242e612080565b5b61243b8482850161228c565b91505092915050565b60006020828403121561245a5761245961207b565b5b6000612468848285016120ce565b91505092915050565b61247a816120a5565b82525050565b60006020820190506124956000830184612471565b92915050565b6000819050919050565b60006124c06124bb6124b684612085565b61249b565b612085565b9050919050565b60006124d2826124a5565b9050919050565b60006124e4826124c7565b9050919050565b6124f4816124d9565b82525050565b600060208201905061250f60008301846124eb565b92915050565b6000806040838503121561252c5761252b61207b565b5b600061253a858286016120ce565b925050602061254b858286016120ce565b9150509250929050565b600081905092915050565b7f666f6e646174696f6e4665650000000000000000000000000000000000000000600082015250565b6000612596600c83612555565b91506125a182612560565b600c82019050919050565b60006125b782612589565b9150819050919050565b7f65636f73797374656d0000000000000000000000000000000000000000000000600082015250565b60006125f7600983612555565b9150612602826125c1565b600982019050919050565b6000612618826125ea565b9150819050919050565b7f6d61726b6574696e674f696e76657374696d656e740000000000000000000000600082015250565b6000612658601583612555565b915061266382612622565b601582019050919050565b60006126798261264b565b9150819050919050565b7f636f6e73756c74696e6700000000000000000000000000000000000000000000600082015250565b60006126b9600a83612555565b91506126c482612683565b600a82019050919050565b60006126da826126ac565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061272b57607f821691505b6020821081141561273f5761273e6126e4565b5b50919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b60006127a1602583611fc1565b91506127ac82612745565b604082019050919050565b600060208201905081810360008301526127d081612794565b9050919050565b60006127e282611fb6565b6127ec8185612555565b93506127fc818560208601611fd2565b80840191505092915050565b600061281482846127d7565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061285982611f58565b915061286483611f58565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156128995761289861281f565b5b828201905092915050565b600060408201905081810360008301526128be8185612016565b90506128cd6020830184611f62565b9392505050565b60006128df82611f58565b91506128ea83611f58565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156129235761292261281f565b5b828202905092915050565b60006060820190506129436000830186612471565b6129506020830185611f62565b81810360408301526129628184612016565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006129a682611f58565b91506129b183611f58565b9250826129c1576129c061296c565b5b828204905092915050565b600081905092915050565b50565b60006129e76000836129cc565b91506129f2826129d7565b600082019050919050565b6000612a08826129da565b9150819050919050565b6000606082019050612a276000830186612471565b612a346020830185611f62565b612a416040830184611f62565b949350505050565b600069ffffffffffffffffffff82169050919050565b612a6881612a49565b8114612a7357600080fd5b50565b600081519050612a8581612a5f565b92915050565b6000819050919050565b612a9e81612a8b565b8114612aa957600080fd5b50565b600081519050612abb81612a95565b92915050565b600081519050612ad0816120e3565b92915050565b600080600080600060a08688031215612af257612af161207b565b5b6000612b0088828901612a76565b9550506020612b1188828901612aac565b9450506040612b2288828901612ac1565b9350506060612b3388828901612ac1565b9250506080612b4488828901612a76565b9150509295509295909350565b6000612b5c82612a8b565b9150612b6783612a8b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612ba657612ba561281f565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612be357612be261281f565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612c2057612c1f61281f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612c5d57612c5c61281f565b5b828202905092915050565b6000604082019050612c7d6000830185612471565b612c8a6020830184611f62565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115612ce857808604811115612cc457612cc361281f565b5b6001851615612cd35780820291505b8081029050612ce185612c91565b9450612ca8565b94509492505050565b600082612d015760019050612dbd565b81612d0f5760009050612dbd565b8160018114612d255760028114612d2f57612d5e565b6001915050612dbd565b60ff841115612d4157612d4061281f565b5b8360020a915084821115612d5857612d5761281f565b5b50612dbd565b5060208310610133831016604e8410600b8410161715612d935782820a905083811115612d8e57612d8d61281f565b5b612dbd565b612da08484846001612c9e565b92509050818404811115612db757612db661281f565b5b81810290505b9392505050565b6000612dcf82611f58565b9150612dda83612397565b9250612e077fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612cf1565b905092915050565b6000612e1a82611f58565b9150612e2583611f58565b925082821015612e3857612e3761281f565b5b828203905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612e9f602583611fc1565b9150612eaa82612e43565b604082019050919050565b60006020820190508181036000830152612ece81612e92565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612f0b601f83611fc1565b9150612f1682612ed5565b602082019050919050565b60006020820190508181036000830152612f3a81612efe565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612f9d602483611fc1565b9150612fa882612f41565b604082019050919050565b60006020820190508181036000830152612fcc81612f90565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061302f602283611fc1565b915061303a82612fd3565b604082019050919050565b6000602082019050818103600083015261305e81613022565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061309b601d83611fc1565b91506130a682613065565b602082019050919050565b600060208201905081810360008301526130ca8161308e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061312d602583611fc1565b9150613138826130d1565b604082019050919050565b6000602082019050818103600083015261315c81613120565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006131bf602383611fc1565b91506131ca82613163565b604082019050919050565b600060208201905081810360008301526131ee816131b2565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613251602683611fc1565b915061325c826131f5565b604082019050919050565b6000602082019050818103600083015261328081613244565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006132c3600983611fc1565b91506132ce826125c1565b602082019050919050565b600060408201905081810360008301526132f2816132b6565b90506133016020830184611f62565b92915050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613363602183611fc1565b915061336e82613307565b604082019050919050565b6000602082019050818103600083015261339281613356565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006133f5602283611fc1565b915061340082613399565b604082019050919050565b60006020820190508181036000830152613424816133e8565b905091905056fea2646970667358221220bde86cf39969dea14581cc26f0fec3f1a47d396eb2a39660342dfd31f5c5e2cd64736f6c63430008090033",
  "devdoc": {
    "author": "Samuele Chiesa",
    "details": "The contract uses openzeppeling lib",
    "kind": "dev",
    "methods": {
      "aggregatorUpgrade(address)": {
        "details": "AggregatorV3Interface is the base of the mint from Matic",
        "params": {
          "newpriceFeedAdd": "New address AggregatorV3Interface"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "amount": "The number of token will burn is already*1e18"
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "constructor": {
        "details": "In the constructor are define the mint cap for each entites and the mint state",
        "params": {
          "priceFeedAdd": "Address AggregatorV3Interface"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getBurned()": {
        "returns": {
          "_0": "return the owner of the contract"
        }
      },
      "getCap()": {
        "returns": {
          "_0": "return the maximum capilazation"
        }
      },
      "getMaticRate()": {
        "details": "The function are create for the test"
      },
      "getMinter4amount()": {
        "details": "The function are create for the test"
      },
      "getMinter4minted()": {
        "details": "The function are create for the test"
      },
      "getOwner()": {
        "returns": {
          "_0": "return the owner of the contract"
        }
      },
      "getPriceFeed()": {
        "details": "The function are create for the test"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mintBurn(address,uint256)": {
        "params": {
          "account": "The account will recieve the money",
          "amount": "The number of token will sent to the account (is already *1e18)"
        }
      },
      "mintDirectly(address,uint256,string)": {
        "details": "Only the owner can call this function and the state of mint will upgrade",
        "params": {
          "_amount": "The number of token will sent to the account",
          "account": "The account will recieve the money",
          "typeMining": "In base of the type choose between: fondationFee, ecosystem, marketingOinvestiment and developing"
        }
      },
      "mintFromMatic()": {
        "details": "Based on the number of matic and mint level, the number of tokens to be sent is defined"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "title": "BLUE BIRD ERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "aggregatorUpgrade(address)": {
        "notice": "AggregatorV3Interface upgrade allows to upgrade the contract from which we take the Matic/USD exchange rate  "
      },
      "burn(uint256)": {
        "notice": "The function allows to burn tokens"
      },
      "mintBurn(address,uint256)": {
        "notice": "The function allows previously burned tokens to be mint"
      },
      "mintDirectly(address,uint256,string)": {
        "notice": "mintDirectly allows the contract owner to distribute the tokens directly to any investors and all other entities. "
      },
      "mintFromMatic()": {
        "notice": "The function allows to mint tokens by sending Matic"
      }
    },
    "notice": "The contract is write for Marco Liu, creator of BlueBird project. This code had the scope to create a new token ERC20",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 67,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 69,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1132,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 1134,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "burned",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1138,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "minter4amount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 1142,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "minter4minted",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 1150,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "miningPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint8)3_storage"
      },
      {
        "astId": 1153,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "priceFeed",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}