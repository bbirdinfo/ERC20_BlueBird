{
  "address": "0xA0A9408B137dcd91788Bf823dAB275e3A291ace1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdd",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BlueBird__ErrorBilancio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlueBird__ErrorCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BlueBird__ErrorERC20Capped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BlueBird__ErrorMint",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aggregatorUpgradeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintBurnEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "mintDirectlyEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintFromMaticEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newpriceFeedAdd",
          "type": "address"
        }
      ],
      "name": "aggregatorUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destroy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaticRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinter4amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinter4minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "typeMining",
          "type": "string"
        }
      ],
      "name": "mintDirectly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFromMatic",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "minter4amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "minter4minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x72258439e7cf18e3663bf2393ebc9f7b290214b828d4a4a2de0e6b0da226bf17",
  "receipt": {
    "to": null,
    "from": "0xBc6107fAcc388290833AB411CBa71D83BB9f3c93",
    "contractAddress": "0xA0A9408B137dcd91788Bf823dAB275e3A291ace1",
    "transactionIndex": 3,
    "gasUsed": "3329337",
    "logsBloom": "0x
    "blockHash": "0xd6e81b481b592d6abf5cc95bc230672a4be25b22f99bd37e0887436e90e6cf46",
    "transactionHash": "0x72258439e7cf18e3663bf2393ebc9f7b290214b828d4a4a2de0e6b0da226bf17",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 31950804,
        "transactionHash": "0x72258439e7cf18e3663bf2393ebc9f7b290214b828d4a4a2de0e6b0da226bf17",
        "address": "0xA0A9408B137dcd91788Bf823dAB275e3A291ace1",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bc6107facc388290833ab411cba71d83bb9f3c93"
        ],
        "data": "0x0000000000000000000000000000000000000000000152d02c7e14af68000000",
        "logIndex": 5,
        "blockHash": "0xd6e81b481b592d6abf5cc95bc230672a4be25b22f99bd37e0887436e90e6cf46"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 31950804,
        "transactionHash": "0x72258439e7cf18e3663bf2393ebc9f7b290214b828d4a4a2de0e6b0da226bf17",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bc6107facc388290833ab411cba71d83bb9f3c93",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c658169149c6a000000000000000000000000000000000000000000000000123dd243cec9f9c4000000000000000000000000000000000000000000000aae9ca97a1eb6a8991700000000000000000000000000000000000000000000000012216cc265b55d5a000000000000000000000000000000000000000000000aae9cc5dfa01fbd3581",
        "logIndex": 6,
        "blockHash": "0xd6e81b481b592d6abf5cc95bc230672a4be25b22f99bd37e0887436e90e6cf46"
      }
    ],
    "blockNumber": 31950804,
    "cumulativeGasUsed": "3485232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada"
  ],
  "numDeployments": 71,
  "solcInputHash": "a586698d6f62b63cae3998d13815190b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BlueBird__ErrorBilancio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlueBird__ErrorCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BlueBird__ErrorERC20Capped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BlueBird__ErrorMint\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aggregatorUpgradeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintBurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"mintDirectlyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintFromMaticEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newpriceFeedAdd\",\"type\":\"address\"}],\"name\":\"aggregatorUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaticRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter4amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter4minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeMining\",\"type\":\"string\"}],\"name\":\"mintDirectly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFromMatic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minter4amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"minter4minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Samuele Chiesa\",\"details\":\"The contract uses openzeppeling lib\",\"kind\":\"dev\",\"methods\":{\"aggregatorUpgrade(address)\":{\"details\":\"AggregatorV3Interface is the base of the mint from Matic\",\"params\":{\"newpriceFeedAdd\":\"New address AggregatorV3Interface\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"amount\":\"The number of token will burn is already*1e18\"}},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"constructor\":{\"details\":\"In the constructor are define the mint cap for each entites and the mint state\",\"params\":{\"priceFeedAdd\":\"Address AggregatorV3Interface\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getBurned()\":{\"returns\":{\"_0\":\"return the owner of the contract\"}},\"getCap()\":{\"returns\":{\"_0\":\"return the maximum capilazation\"}},\"getMaticRate()\":{\"details\":\"The function are create for the test\"},\"getMinter4amount()\":{\"details\":\"The function are create for the test\"},\"getMinter4minted()\":{\"details\":\"The function are create for the test\"},\"getOwner()\":{\"returns\":{\"_0\":\"return the owner of the contract\"}},\"getPriceFeed()\":{\"details\":\"The function are create for the test\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintBurn(address,uint256)\":{\"params\":{\"account\":\"The account will recieve the money\",\"amount\":\"The number of token will sent to the account (is already *1e18)\"}},\"mintDirectly(address,uint256,string)\":{\"details\":\"Only the owner can call this function and the state of mint will upgrade\",\"params\":{\"_amount\":\"The number of token will sent to the account\",\"account\":\"The account will recieve the money\",\"typeMining\":\"In base of the type choose between: fondationFee, ecosystem, marketingOinvestiment and developing\"}},\"mintFromMatic()\":{\"details\":\"Based on the number of matic and mint level, the number of tokens to be sent is defined\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"title\":\"BLUE BIRD ERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregatorUpgrade(address)\":{\"notice\":\"AggregatorV3Interface upgrade allows to upgrade the contract from which we take the Matic/USD exchange rate  \"},\"burn(uint256)\":{\"notice\":\"The function allows to burn tokens\"},\"mintBurn(address,uint256)\":{\"notice\":\"The function allows previously burned tokens to be mint\"},\"mintDirectly(address,uint256,string)\":{\"notice\":\"mintDirectly allows the contract owner to distribute the tokens directly to any investors and all other entities. \"},\"mintFromMatic()\":{\"notice\":\"The function allows to mint tokens by sending Matic\"}},\"notice\":\"The contract is write for Marco Liu, creator of BlueBird project. This code had the scope to create a new token ERC20\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlueBird.sol\":\"BlueBird\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/BlueBird.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title BLUE BIRD ERC20\\n * @author Samuele Chiesa\\n * @notice The contract is write for Marco Liu, creator of BlueBird project. This code had the scope to create a new token ERC20\\n * @dev The contract uses openzeppeling lib\\n */\\ncontract BlueBird is ERC20, ERC20Burnable {\\n    /*--- COSTANTS ---*/\\n    address payable private immutable owner;\\n    uint private immutable cap = 1000000000;\\n    bool initialized=false;\\n\\n    /*--- VARIABLES ---*/\\n    uint private burned;\\n    mapping (string=>uint256) public minter4amount;\\n    mapping (string=>uint256) public minter4minted;\\n    uint8[3] private miningPrice = [125,100,50];\\n    AggregatorV3Interface internal priceFeed;\\n    bool internal locked;\\n\\n    /*--- MODIFIER ---*/\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the owner can call this function\\\");\\n        _;\\n    }\\n    modifier checkMint(string memory typeMining, uint _amount){\\n        if(minter4minted[typeMining]+_amount > minter4amount[typeMining])\\n            revert BlueBird__ErrorMint(typeMining, _amount);\\n        _;\\n    }\\n    modifier checkCap(uint amount){\\n        if((ERC20.totalSupply()) + amount > cap*1e18){\\n            revert BlueBird__ErrorERC20Capped();\\n        }\\n        _;\\n    }\\n    modifier checkBalance(uint bilancio,uint amount){\\n        if(bilancio<amount){\\n            revert BlueBird__ErrorBilancio();\\n        }\\n        _;\\n    }\\n    modifier noReentrant() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /*--- ERROR ---*/\\n    error BlueBird__ErrorMint(string, uint);\\n    error BlueBird__ErrorERC20Capped();\\n    error BlueBird__ErrorCall();\\n    error BlueBird__ErrorBilancio();\\n\\n    /*--- EVENTS ---*/\\n    event aggregatorUpgradeEvent(address);\\n    event mintFromMaticEvent(address, uint, uint);\\n    event mintDirectlyEvent(address, uint, string);\\n    event burnEvent(address, uint);\\n    event mintBurnEvent(address, uint);\\n\\n    /*--- CONSTRUCTOR ---*/\\n    /**\\n     * @dev In the constructor are define the mint cap for each entites and the mint state\\n     * @param priceFeedAdd Address AggregatorV3Interface\\n     */ \\n    constructor(address priceFeedAdd) ERC20(\\\"BlueBird\\\", \\\"BBD\\\"){\\n        owner = payable(msg.sender);\\n        minter4amount[\\\"fondationFee\\\"] = cap*8/100*1e18;\\n        minter4amount[\\\"ecosystem\\\"] = cap*58/100*1e18;\\n        minter4amount[\\\"marketingOinvestiment\\\"] = cap*24/100*1e18;\\n        minter4amount[\\\"consulting\\\"] = cap*10/100*1e18;\\n\\n        minter4minted[\\\"fondationFee\\\"] = cap*8/100*2/100*1e18;\\n        minter4minted[\\\"ecosystem\\\"] = 0;\\n        minter4minted[\\\"marketingOinvestiment\\\"] = 0;\\n        minter4minted[\\\"consulting\\\"] = 0;\\n\\n        priceFeed = AggregatorV3Interface(priceFeedAdd);\\n        _mint(owner, cap*8/100*2/100*1e18);\\n    }\\n\\n    /*--- FUNCTION ---*/\\n\\n    // AGGREGATOR UPGRADE\\n    /**\\n     * @notice AggregatorV3Interface upgrade allows to upgrade the contract from which we take the Matic/USD exchange rate  \\n     * @dev AggregatorV3Interface is the base of the mint from Matic\\n     * @param newpriceFeedAdd New address AggregatorV3Interface\\n     */ \\n    function aggregatorUpgrade(address newpriceFeedAdd) public onlyOwner {\\n        priceFeed = AggregatorV3Interface(newpriceFeedAdd);\\n        emit aggregatorUpgradeEvent(newpriceFeedAdd);\\n    }\\n\\n    // MINT FUNCTION\\n    /**\\n     * @notice mintDirectly allows the contract owner to distribute the tokens directly to any investors and all other entities. \\n     * @dev Only the owner can call this function and the state of mint will upgrade\\n     * @param account The account will recieve the money\\n     * @param _amount The number of token will sent to the account\\n     * @param typeMining In base of the type choose between: fondationFee, ecosystem, marketingOinvestiment and developing\\n     */ \\n    function mintDirectly(address account, uint256 _amount, string memory typeMining) public onlyOwner checkMint(typeMining,_amount*1e18) {\\n        minter4minted[typeMining] = minter4minted[typeMining]+_amount*1e18;\\n        _mint(account,_amount*1e18);\\n        emit mintDirectlyEvent(account, _amount, typeMining);\\n    }\\n\\n    /**\\n     * @notice The function allows to mint tokens by sending Matic\\n     * @dev Based on the number of matic and mint level, the number of tokens to be sent is defined\\n     */ \\n    // NB: il prezzo di mint dipende dal prezzo a cui si \\u00e8 arrivati nel momento del mint, \\n    //      se un acquisto dovesse andare a cavallo su due 2 fasce di prezzo viene presa quella inferiore\\n    function mintFromMatic() external payable checkBalance(address(msg.sender).balance,msg.value) noReentrant(){\\n        uint value1 = msg.value;\\n        uint mintPrice;\\n        if(minter4minted[\\\"ecosystem\\\"]<(cap*25/100*1e18)){\\n            mintPrice = mintTokenAmount(0);\\n        } else if (minter4minted[\\\"ecosystem\\\"]< ((cap*15/100)*1e18 + (cap*25/100)*1e18)){\\n            mintPrice = mintTokenAmount(1);\\n        } else {\\n            mintPrice = mintTokenAmount(2);\\n        }\\n        uint valueMint = mintPrice*value1/1e18;\\n\\n        if(minter4minted[\\\"ecosystem\\\"] + mintPrice > minter4amount[\\\"ecosystem\\\"]){\\n            revert BlueBird__ErrorMint(\\\"ecosystem\\\",mintPrice/1e18);\\n        }\\n        minter4minted[\\\"ecosystem\\\"] = minter4minted[\\\"ecosystem\\\"]+valueMint*1e18;\\n        (bool callSuccess,) = owner.call{value: msg.value}('');\\n        if(!callSuccess){\\n            revert BlueBird__ErrorCall();\\n        }\\n        _mint(msg.sender,valueMint);\\n\\n        emit mintFromMaticEvent(msg.sender, valueMint/1e18, mintPrice);\\n\\n    }\\n\\n    /**\\n     * @dev Private function uses for define amount of token from an amount of matic\\n     */ \\n    function mintTokenAmount(uint8 n) private view returns(uint){\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        uint maticUsd = uint256(answer * 10000000000);\\n        uint price = miningPrice[n];\\n        uint mintPrice = maticUsd*price;\\n        return mintPrice;\\n    }\\n\\n    /**\\n     * @dev Override of ERC20\\n     */ \\n    function _mint(address account, uint256 amount) internal virtual override(ERC20) checkCap(amount) {\\n        super._mint(account, amount);\\n    }\\n\\n    // DESTROY FUNCTION\\n    function destroy() public onlyOwner {\\n        selfdestruct(owner);\\n    }\\n\\n    //BURN FUNCTION\\n    /**\\n     * @notice The function allows to burn tokens\\n     * @param amount The number of token will burn is already*1e18\\n     */ \\n    function burn(uint256 amount) public override(ERC20Burnable) checkBalance(balanceOf(msg.sender),amount){\\n        burned = burned+amount;\\n        _burn(msg.sender, amount);//* (10 ** decimals())\\n        emit burnEvent(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice The function allows previously burned tokens to be mint\\n     * @param account The account will recieve the money\\n     * @param amount The number of token will sent to the account (is already *1e18)\\n     */ \\n    function mintBurn(address account,uint256 amount) public onlyOwner checkBalance(burned,amount){\\n        burned = burned-amount;\\n        _mint(account, amount);\\n        emit mintBurnEvent(account, amount);\\n    }\\n\\n    // GET FUNCTION\\n    /**\\n     * @return return the maximum capilazation\\n     */ \\n    function getCap() public view returns (uint256) {\\n        return cap* (10 ** decimals());\\n    }\\n\\n    /**\\n     * @return return the owner of the contract\\n     */ \\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @return return the owner of the contract\\n     */ \\n    function getBurned() public view returns (uint) {\\n        return burned;\\n    }\\n\\n    /**\\n     * @dev The function are create for the test\\n     */ \\n    function getMinter4amount() public view returns(uint, uint, uint, uint){\\n        return (\\n            minter4amount[\\\"fondationFee\\\"],\\n            minter4amount[\\\"ecosystem\\\"],\\n            minter4amount[\\\"marketingOinvestiment\\\"],\\n            minter4amount[\\\"consulting\\\"]\\n        );\\n    }\\n\\n    /**\\n     * @dev The function are create for the test\\n     */ \\n    function getMinter4minted() public view returns(uint, uint, uint, uint){\\n        return (\\n            minter4minted[\\\"fondationFee\\\"],\\n            minter4minted[\\\"ecosystem\\\"],\\n            minter4minted[\\\"marketingOinvestiment\\\"],\\n            minter4minted[\\\"consulting\\\"]\\n        );\\n    }\\n\\n    /**\\n     * @dev The function are create for the test\\n     */ \\n    function getMaticRate() public view returns(uint result){\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        result = uint256(answer * 10000000000);\\n    }\\n\\n    \\n    /**\\n     * @dev The function are create for the test\\n     */ \\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return priceFeed;\\n    }\\n}\",\"keccak256\":\"0x3cf5a281bf67995c40a89f8cae566c624c970824b008ccea30aab6ebb65251c4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052633b9aca0060a0908152506000600560006101000a81548160ff0219169083151502179055506040518060600160405280607d60ff168152602001606460ff168152602001603260ff168152506009906003620000639291906200065e565b503480156200007157600080fd5b506040516200429c3803806200429c833981810160405281019062000097919062000819565b6040518060400160405280600881526020017f426c7565426972640000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f424244000000000000000000000000000000000000000000000000000000000081525081600390805190602001906200011b929190620006ff565b50806004908051906020019062000134929190620006ff565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050670de0b6b3a76400006064600860a05162000187919062000884565b62000193919062000914565b6200019f919062000884565b6007604051620001af90620009a7565b908152602001604051809103902081905550670de0b6b3a76400006064603a60a051620001dd919062000884565b620001e9919062000914565b620001f5919062000884565b6007604051620002059062000a0e565b908152602001604051809103902081905550670de0b6b3a76400006064601860a05162000233919062000884565b6200023f919062000914565b6200024b919062000884565b60076040516200025b9062000a75565b908152602001604051809103902081905550670de0b6b3a76400006064600a60a05162000289919062000884565b62000295919062000914565b620002a1919062000884565b6007604051620002b19062000adc565b908152602001604051809103902081905550670de0b6b3a7640000606460026064600860a051620002e3919062000884565b620002ef919062000914565b620002fb919062000884565b62000307919062000914565b62000313919062000884565b60086040516200032390620009a7565b90815260200160405180910390208190555060006008604051620003479062000a0e565b908152602001604051809103902081905550600060086040516200036b9062000a75565b908152602001604051809103902081905550600060086040516200038f9062000adc565b90815260200160405180910390208190555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000445608051670de0b6b3a7640000606460026064600860a05162000409919062000884565b62000415919062000914565b62000421919062000884565b6200042d919062000914565b62000439919062000884565b6200044c60201b60201c565b5062000c66565b80670de0b6b3a764000060a05162000465919062000884565b816200047b620004dc60201b620009bf1760201c565b62000487919062000af3565b1115620004c0576040517f3e05993300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620004d78383620004e660201b620016b21760201c565b505050565b6000600254905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000559576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005509062000bb1565b60405180910390fd5b6200056d600083836200065460201b60201c565b806002600082825462000581919062000af3565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000634919062000be4565b60405180910390a362000650600083836200065960201b60201c565b5050565b505050565b505050565b826003601f01602090048101928215620006ec5791602002820160005b83821115620006bb57835183826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026200067b565b8015620006ea5782816101000a81549060ff0219169055600101602081600001049283019260010302620006bb565b505b509050620006fb919062000790565b5090565b8280546200070d9062000c30565b90600052602060002090601f0160209004810192826200073157600085556200077d565b82601f106200074c57805160ff19168380011785556200077d565b828001600101855582156200077d579182015b828111156200077c5782518255916020019190600101906200075f565b5b5090506200078c919062000790565b5090565b5b80821115620007ab57600081600090555060010162000791565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620007e182620007b4565b9050919050565b620007f381620007d4565b8114620007ff57600080fd5b50565b6000815190506200081381620007e8565b92915050565b600060208284031215620008325762000831620007af565b5b6000620008428482850162000802565b91505092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000891826200084b565b91506200089e836200084b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620008da57620008d962000855565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000921826200084b565b91506200092e836200084b565b925082620009415762000940620008e5565b5b828204905092915050565b600081905092915050565b7f666f6e646174696f6e4665650000000000000000000000000000000000000000600082015250565b60006200098f600c836200094c565b91506200099c8262000957565b600c82019050919050565b6000620009b48262000980565b9150819050919050565b7f65636f73797374656d0000000000000000000000000000000000000000000000600082015250565b6000620009f66009836200094c565b915062000a0382620009be565b600982019050919050565b600062000a1b82620009e7565b9150819050919050565b7f6d61726b6574696e674f696e76657374696d656e740000000000000000000000600082015250565b600062000a5d6015836200094c565b915062000a6a8262000a25565b601582019050919050565b600062000a828262000a4e565b9150819050919050565b7f636f6e73756c74696e6700000000000000000000000000000000000000000000600082015250565b600062000ac4600a836200094c565b915062000ad18262000a8c565b600a82019050919050565b600062000ae98262000ab5565b9150819050919050565b600062000b00826200084b565b915062000b0d836200084b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000b455762000b4462000855565b5b828201905092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000b99601f8362000b50565b915062000ba68262000b61565b602082019050919050565b6000602082019050818103600083015262000bcc8162000b8a565b9050919050565b62000bde816200084b565b82525050565b600060208201905062000bfb600083018462000bd3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000c4957607f821691505b6020821081141562000c605762000c5f62000c01565b5b50919050565b60805160a0516135ca62000cd260003960008181610acc01528181610b4c01528181610b980152818161105e01526119e80152600081816107d201528181610d3e0152818161110001528181611229015281816112b7015281816112f2015261145c01526135ca6000f3fe60806040526004361061019c5760003560e01c80636fea47e3116100ec57806395d89b411161008a578063a457c2d711610064578063a457c2d71461059f578063a9059cbb146105dc578063cdc8510f14610619578063dd62ed3e146106565761019c565b806395d89b41146105205780639e87a5cd1461054b578063a42f5373146105765761019c565b80637d4387a6116100c65780637d4387a61461048757806383197ef0146104b0578063893d20e8146104c75780638bc82c95146104f25761019c565b80636fea47e3146103f657806370a082311461042157806379cc67901461045e5761019c565b806327dea227116101595780633950935111610133578063395093511461032857806342966c681461036557806343a4fac81461038e578063554d578d146103cb5761019c565b806327dea227146102c8578063313ce567146102d2578063341f1f63146102fd5761019c565b806305808a29146101a157806306fdde03146101cf578063095ea7b3146101fa5780631611d50b1461023757806318160ddd1461026057806323b872dd1461028b575b600080fd5b3480156101ad57600080fd5b506101b6610693565b6040516101c6949392919061206e565b60405180910390f35b3480156101db57600080fd5b506101e461071b565b6040516101f1919061214c565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c919061220c565b6107ad565b60405161022e9190612267565b60405180910390f35b34801561024357600080fd5b5061025e600480360381019061025991906123b7565b6107d0565b005b34801561026c57600080fd5b506102756109bf565b6040516102829190612426565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190612441565b6109c9565b6040516102bf9190612267565b60405180910390f35b6102d06109f8565b005b3480156102de57600080fd5b506102e7610e78565b6040516102f491906124b0565b60405180910390f35b34801561030957600080fd5b50610312610e81565b60405161031f9190612426565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a919061220c565b610f41565b60405161035c9190612267565b60405180910390f35b34801561037157600080fd5b5061038c600480360381019061038791906124cb565b610f78565b005b34801561039a57600080fd5b506103b560048036038101906103b091906124f8565b611018565b6040516103c29190612426565b60405180910390f35b3480156103d757600080fd5b506103e0611046565b6040516103ed9190612426565b60405180910390f35b34801561040257600080fd5b5061040b61108c565b6040516104189190612426565b60405180910390f35b34801561042d57600080fd5b5061044860048036038101906104439190612541565b611096565b6040516104559190612426565b60405180910390f35b34801561046a57600080fd5b506104856004803603810190610480919061220c565b6110de565b005b34801561049357600080fd5b506104ae60048036038101906104a9919061220c565b6110fe565b005b3480156104bc57600080fd5b506104c5611227565b005b3480156104d357600080fd5b506104dc6112ee565b6040516104e9919061257d565b60405180910390f35b3480156104fe57600080fd5b50610507611316565b604051610517949392919061206e565b60405180910390f35b34801561052c57600080fd5b5061053561139e565b604051610542919061214c565b60405180910390f35b34801561055757600080fd5b50610560611430565b60405161056d91906125f7565b60405180910390f35b34801561058257600080fd5b5061059d60048036038101906105989190612541565b61145a565b005b3480156105ab57600080fd5b506105c660048036038101906105c1919061220c565b611563565b6040516105d39190612267565b60405180910390f35b3480156105e857600080fd5b5061060360048036038101906105fe919061220c565b6115da565b6040516106109190612267565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b91906124f8565b6115fd565b60405161064d9190612426565b60405180910390f35b34801561066257600080fd5b5061067d60048036038101906106789190612612565b61162b565b60405161068a9190612426565b60405180910390f35b60008060008060076040516106a7906126a9565b90815260200160405180910390205460076040516106c49061270a565b90815260200160405180910390205460076040516106e19061276b565b90815260200160405180910390205460076040516106fe906127cc565b908152602001604051809103902054935093509350935090919293565b60606003805461072a90612810565b80601f016020809104026020016040519081016040528092919081815260200182805461075690612810565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050905090565b6000806107b8611809565b90506107c5818585611811565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610855906128b4565b60405180910390fd5b80670de0b6b3a7640000836108739190612903565b600782604051610883919061298e565b908152602001604051809103902054816008846040516108a3919061298e565b9081526020016040518091039020546108bc91906129a5565b11156109015781816040517fe8379cc40000000000000000000000000000000000000000000000000000000081526004016108f89291906129fb565b60405180910390fd5b670de0b6b3a7640000846109159190612903565b600884604051610925919061298e565b90815260200160405180910390205461093e91906129a5565b60088460405161094e919061298e565b90815260200160405180910390208190555061097d85670de0b6b3a7640000866109789190612903565b6119dc565b7f2e01b6cac1db8ec7bbba20f52c7971dd718808586f301d3ef4c44df26e9cd21f8585856040516109b093929190612a2b565b60405180910390a15050505050565b6000600254905090565b6000806109d4611809565b90506109e1858285611a6b565b6109ec858585611af7565b60019150509392505050565b3373ffffffffffffffffffffffffffffffffffffffff16313480821015610a4b576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60149054906101000a900460ff1615610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290612ab5565b60405180910390fd5b6001600a60146101000a81548160ff02191690831515021790555060003490506000670de0b6b3a7640000606460197f0000000000000000000000000000000000000000000000000000000000000000610af59190612903565b610aff9190612b04565b610b099190612903565b6008604051610b179061270a565b9081526020016040518091039020541015610b3d57610b366000611d6f565b9050610c21565b670de0b6b3a7640000606460197f0000000000000000000000000000000000000000000000000000000000000000610b759190612903565b610b7f9190612b04565b610b899190612903565b670de0b6b3a76400006064600f7f0000000000000000000000000000000000000000000000000000000000000000610bc19190612903565b610bcb9190612b04565b610bd59190612903565b610bdf91906129a5565b6008604051610bed9061270a565b9081526020016040518091039020541015610c1357610c0c6001611d6f565b9050610c20565b610c1d6002611d6f565b90505b5b6000670de0b6b3a76400008383610c389190612903565b610c429190612b04565b90506007604051610c529061270a565b908152602001604051809103902054826008604051610c709061270a565b908152602001604051809103902054610c8991906129a5565b1115610cdf57670de0b6b3a764000082610ca39190612b04565b6040517fe8379cc4000000000000000000000000000000000000000000000000000000008152600401610cd69190612b58565b60405180910390fd5b670de0b6b3a764000081610cf39190612903565b6008604051610d019061270a565b908152602001604051809103902054610d1a91906129a5565b6008604051610d289061270a565b90815260200160405180910390208190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1634604051610d8090612bb7565b60006040518083038185875af1925050503d8060008114610dbd576040519150601f19603f3d011682016040523d82523d6000602084013e610dc2565b606091505b5050905080610dfd576040517fa81dc2e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e0733836119dc565b7fd69dd5c77c111946fad2dbb4a9f28e2ea0f77d1e9c1223a2ac8a787a3cadbc8e33670de0b6b3a764000084610e3d9190612b04565b85604051610e4d93929190612bcc565b60405180910390a1505050506000600a60146101000a81548160ff0219169083151502179055505050565b60006012905090565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f249190612c90565b5050509150506402540be40081610f3b9190612d0b565b91505090565b600080610f4c611809565b9050610f6d818585610f5e858961162b565b610f6891906129a5565b611811565b600191505092915050565b610f8133611096565b8180821015610fbc576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600654610fca91906129a5565b600681905550610fda3384611e7d565b7fda4e31583a2259fe317cadb7a8df04c4ff0072abd596ee177b39d24894a2ec6b338460405161100b929190612e22565b60405180910390a1505050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000611050610e78565b600a61105c9190612f7e565b7f00000000000000000000000000000000000000000000000000000000000000006110879190612903565b905090565b6000600654905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110f0826110ea611809565b83611a6b565b6110fa8282611e7d565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461118c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611183906128b4565b60405180910390fd5b60065481808210156111ca576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826006546111d89190612fc9565b6006819055506111e884846119dc565b7f498789b97a924d6566d2d756b70ef5ea7f0720f0e6ed51845c77eda0afa092cb8484604051611219929190612e22565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ac906128b4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16ff5b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600080600860405161132a906126a9565b90815260200160405180910390205460086040516113479061270a565b90815260200160405180910390205460086040516113649061276b565b9081526020016040518091039020546008604051611381906127cc565b908152602001604051809103902054935093509350935090919293565b6060600480546113ad90612810565b80601f01602080910402602001604051908101604052809291908181526020018280546113d990612810565b80156114265780601f106113fb57610100808354040283529160200191611426565b820191906000526020600020905b81548152906001019060200180831161140957829003601f168201915b5050505050905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114df906128b4565b60405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c8ac2008786a97973d123ada788ee2512dac4139ac736ef2994f2b3288d99b581604051611558919061257d565b60405180910390a150565b60008061156e611809565b9050600061157c828661162b565b9050838110156115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b89061306f565b60405180910390fd5b6115ce8286868403611811565b60019250505092915050565b6000806115e5611809565b90506115f2818585611af7565b600191505092915050565b6008818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611719906130db565b60405180910390fd5b61172e6000838361204b565b806002600082825461174091906129a5565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516117f19190612426565b60405180910390a361180560008383612050565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611881576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118789061316d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e8906131ff565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516119cf9190612426565b60405180910390a3505050565b80670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000611a119190612903565b81611a1a6109bf565b611a2491906129a5565b1115611a5c576040517f3e05993300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a6683836116b2565b505050565b6000611a77848461162b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611af15781811015611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ada9061326b565b60405180910390fd5b611af08484848403611811565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5e906132fd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bce9061338f565b60405180910390fd5b611be283838361204b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5f90613421565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d569190612426565b60405180910390a3611d69848484612050565b50505050565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611dda57600080fd5b505afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e129190612c90565b50505091505060006402540be40082611e2b9190612d0b565b9050600060098560ff1660038110611e4657611e45613441565b5b602091828204019190069054906101000a900460ff1660ff16905060008183611e6f9190612903565b905080945050505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee4906134e2565b60405180910390fd5b611ef98260008361204b565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7690613574565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516120329190612426565b60405180910390a361204683600084612050565b505050565b505050565b505050565b6000819050919050565b61206881612055565b82525050565b6000608082019050612083600083018761205f565b612090602083018661205f565b61209d604083018561205f565b6120aa606083018461205f565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120ed5780820151818401526020810190506120d2565b838111156120fc576000848401525b50505050565b6000601f19601f8301169050919050565b600061211e826120b3565b61212881856120be565b93506121388185602086016120cf565b61214181612102565b840191505092915050565b600060208201905081810360008301526121668184612113565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121ad82612182565b9050919050565b6121bd816121a2565b81146121c857600080fd5b50565b6000813590506121da816121b4565b92915050565b6121e981612055565b81146121f457600080fd5b50565b600081359050612206816121e0565b92915050565b6000806040838503121561222357612222612178565b5b6000612231858286016121cb565b9250506020612242858286016121f7565b9150509250929050565b60008115159050919050565b6122618161224c565b82525050565b600060208201905061227c6000830184612258565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122c482612102565b810181811067ffffffffffffffff821117156122e3576122e261228c565b5b80604052505050565b60006122f661216e565b905061230282826122bb565b919050565b600067ffffffffffffffff8211156123225761232161228c565b5b61232b82612102565b9050602081019050919050565b82818337600083830152505050565b600061235a61235584612307565b6122ec565b90508281526020810184848401111561237657612375612287565b5b612381848285612338565b509392505050565b600082601f83011261239e5761239d612282565b5b81356123ae848260208601612347565b91505092915050565b6000806000606084860312156123d0576123cf612178565b5b60006123de868287016121cb565b93505060206123ef868287016121f7565b925050604084013567ffffffffffffffff8111156124105761240f61217d565b5b61241c86828701612389565b9150509250925092565b600060208201905061243b600083018461205f565b92915050565b60008060006060848603121561245a57612459612178565b5b6000612468868287016121cb565b9350506020612479868287016121cb565b925050604061248a868287016121f7565b9150509250925092565b600060ff82169050919050565b6124aa81612494565b82525050565b60006020820190506124c560008301846124a1565b92915050565b6000602082840312156124e1576124e0612178565b5b60006124ef848285016121f7565b91505092915050565b60006020828403121561250e5761250d612178565b5b600082013567ffffffffffffffff81111561252c5761252b61217d565b5b61253884828501612389565b91505092915050565b60006020828403121561255757612556612178565b5b6000612565848285016121cb565b91505092915050565b612577816121a2565b82525050565b6000602082019050612592600083018461256e565b92915050565b6000819050919050565b60006125bd6125b86125b384612182565b612598565b612182565b9050919050565b60006125cf826125a2565b9050919050565b60006125e1826125c4565b9050919050565b6125f1816125d6565b82525050565b600060208201905061260c60008301846125e8565b92915050565b6000806040838503121561262957612628612178565b5b6000612637858286016121cb565b9250506020612648858286016121cb565b9150509250929050565b600081905092915050565b7f666f6e646174696f6e4665650000000000000000000000000000000000000000600082015250565b6000612693600c83612652565b915061269e8261265d565b600c82019050919050565b60006126b482612686565b9150819050919050565b7f65636f73797374656d0000000000000000000000000000000000000000000000600082015250565b60006126f4600983612652565b91506126ff826126be565b600982019050919050565b6000612715826126e7565b9150819050919050565b7f6d61726b6574696e674f696e76657374696d656e740000000000000000000000600082015250565b6000612755601583612652565b91506127608261271f565b601582019050919050565b600061277682612748565b9150819050919050565b7f636f6e73756c74696e6700000000000000000000000000000000000000000000600082015250565b60006127b6600a83612652565b91506127c182612780565b600a82019050919050565b60006127d7826127a9565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061282857607f821691505b6020821081141561283c5761283b6127e1565b5b50919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b600061289e6025836120be565b91506128a982612842565b604082019050919050565b600060208201905081810360008301526128cd81612891565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061290e82612055565b915061291983612055565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612952576129516128d4565b5b828202905092915050565b6000612968826120b3565b6129728185612652565b93506129828185602086016120cf565b80840191505092915050565b600061299a828461295d565b915081905092915050565b60006129b082612055565b91506129bb83612055565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129f0576129ef6128d4565b5b828201905092915050565b60006040820190508181036000830152612a158185612113565b9050612a24602083018461205f565b9392505050565b6000606082019050612a40600083018661256e565b612a4d602083018561205f565b8181036040830152612a5f8184612113565b9050949350505050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000612a9f600e836120be565b9150612aaa82612a69565b602082019050919050565b60006020820190508181036000830152612ace81612a92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b0f82612055565b9150612b1a83612055565b925082612b2a57612b29612ad5565b5b828204905092915050565b6000612b426009836120be565b9150612b4d826126be565b602082019050919050565b60006040820190508181036000830152612b7181612b35565b9050612b80602083018461205f565b92915050565b600081905092915050565b50565b6000612ba1600083612b86565b9150612bac82612b91565b600082019050919050565b6000612bc282612b94565b9150819050919050565b6000606082019050612be1600083018661256e565b612bee602083018561205f565b612bfb604083018461205f565b949350505050565b600069ffffffffffffffffffff82169050919050565b612c2281612c03565b8114612c2d57600080fd5b50565b600081519050612c3f81612c19565b92915050565b6000819050919050565b612c5881612c45565b8114612c6357600080fd5b50565b600081519050612c7581612c4f565b92915050565b600081519050612c8a816121e0565b92915050565b600080600080600060a08688031215612cac57612cab612178565b5b6000612cba88828901612c30565b9550506020612ccb88828901612c66565b9450506040612cdc88828901612c7b565b9350506060612ced88828901612c7b565b9250506080612cfe88828901612c30565b9150509295509295909350565b6000612d1682612c45565b9150612d2183612c45565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612d6057612d5f6128d4565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612d9d57612d9c6128d4565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612dda57612dd96128d4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612e1757612e166128d4565b5b828202905092915050565b6000604082019050612e37600083018561256e565b612e44602083018461205f565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115612ea257808604811115612e7e57612e7d6128d4565b5b6001851615612e8d5780820291505b8081029050612e9b85612e4b565b9450612e62565b94509492505050565b600082612ebb5760019050612f77565b81612ec95760009050612f77565b8160018114612edf5760028114612ee957612f18565b6001915050612f77565b60ff841115612efb57612efa6128d4565b5b8360020a915084821115612f1257612f116128d4565b5b50612f77565b5060208310610133831016604e8410600b8410161715612f4d5782820a905083811115612f4857612f476128d4565b5b612f77565b612f5a8484846001612e58565b92509050818404811115612f7157612f706128d4565b5b81810290505b9392505050565b6000612f8982612055565b9150612f9483612494565b9250612fc17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612eab565b905092915050565b6000612fd482612055565b9150612fdf83612055565b925082821015612ff257612ff16128d4565b5b828203905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006130596025836120be565b915061306482612ffd565b604082019050919050565b600060208201905081810360008301526130888161304c565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006130c5601f836120be565b91506130d08261308f565b602082019050919050565b600060208201905081810360008301526130f4816130b8565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006131576024836120be565b9150613162826130fb565b604082019050919050565b600060208201905081810360008301526131868161314a565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006131e96022836120be565b91506131f48261318d565b604082019050919050565b60006020820190508181036000830152613218816131dc565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000613255601d836120be565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006132e76025836120be565b91506132f28261328b565b604082019050919050565b60006020820190508181036000830152613316816132da565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006133796023836120be565b91506133848261331d565b604082019050919050565b600060208201905081810360008301526133a88161336c565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061340b6026836120be565b9150613416826133af565b604082019050919050565b6000602082019050818103600083015261343a816133fe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006134cc6021836120be565b91506134d782613470565b604082019050919050565b600060208201905081810360008301526134fb816134bf565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061355e6022836120be565b915061356982613502565b604082019050919050565b6000602082019050818103600083015261358d81613551565b905091905056fea264697066735822122076383f3267170ab8cda54a3430b5939a30021ed6d9463786dc6733df9b98435d64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80636fea47e3116100ec57806395d89b411161008a578063a457c2d711610064578063a457c2d71461059f578063a9059cbb146105dc578063cdc8510f14610619578063dd62ed3e146106565761019c565b806395d89b41146105205780639e87a5cd1461054b578063a42f5373146105765761019c565b80637d4387a6116100c65780637d4387a61461048757806383197ef0146104b0578063893d20e8146104c75780638bc82c95146104f25761019c565b80636fea47e3146103f657806370a082311461042157806379cc67901461045e5761019c565b806327dea227116101595780633950935111610133578063395093511461032857806342966c681461036557806343a4fac81461038e578063554d578d146103cb5761019c565b806327dea227146102c8578063313ce567146102d2578063341f1f63146102fd5761019c565b806305808a29146101a157806306fdde03146101cf578063095ea7b3146101fa5780631611d50b1461023757806318160ddd1461026057806323b872dd1461028b575b600080fd5b3480156101ad57600080fd5b506101b6610693565b6040516101c6949392919061206e565b60405180910390f35b3480156101db57600080fd5b506101e461071b565b6040516101f1919061214c565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c919061220c565b6107ad565b60405161022e9190612267565b60405180910390f35b34801561024357600080fd5b5061025e600480360381019061025991906123b7565b6107d0565b005b34801561026c57600080fd5b506102756109bf565b6040516102829190612426565b60405180910390f35b34801561029757600080fd5b506102b260048036038101906102ad9190612441565b6109c9565b6040516102bf9190612267565b60405180910390f35b6102d06109f8565b005b3480156102de57600080fd5b506102e7610e78565b6040516102f491906124b0565b60405180910390f35b34801561030957600080fd5b50610312610e81565b60405161031f9190612426565b60405180910390f35b34801561033457600080fd5b5061034f600480360381019061034a919061220c565b610f41565b60405161035c9190612267565b60405180910390f35b34801561037157600080fd5b5061038c600480360381019061038791906124cb565b610f78565b005b34801561039a57600080fd5b506103b560048036038101906103b091906124f8565b611018565b6040516103c29190612426565b60405180910390f35b3480156103d757600080fd5b506103e0611046565b6040516103ed9190612426565b60405180910390f35b34801561040257600080fd5b5061040b61108c565b6040516104189190612426565b60405180910390f35b34801561042d57600080fd5b5061044860048036038101906104439190612541565b611096565b6040516104559190612426565b60405180910390f35b34801561046a57600080fd5b506104856004803603810190610480919061220c565b6110de565b005b34801561049357600080fd5b506104ae60048036038101906104a9919061220c565b6110fe565b005b3480156104bc57600080fd5b506104c5611227565b005b3480156104d357600080fd5b506104dc6112ee565b6040516104e9919061257d565b60405180910390f35b3480156104fe57600080fd5b50610507611316565b604051610517949392919061206e565b60405180910390f35b34801561052c57600080fd5b5061053561139e565b604051610542919061214c565b60405180910390f35b34801561055757600080fd5b50610560611430565b60405161056d91906125f7565b60405180910390f35b34801561058257600080fd5b5061059d60048036038101906105989190612541565b61145a565b005b3480156105ab57600080fd5b506105c660048036038101906105c1919061220c565b611563565b6040516105d39190612267565b60405180910390f35b3480156105e857600080fd5b5061060360048036038101906105fe919061220c565b6115da565b6040516106109190612267565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b91906124f8565b6115fd565b60405161064d9190612426565b60405180910390f35b34801561066257600080fd5b5061067d60048036038101906106789190612612565b61162b565b60405161068a9190612426565b60405180910390f35b60008060008060076040516106a7906126a9565b90815260200160405180910390205460076040516106c49061270a565b90815260200160405180910390205460076040516106e19061276b565b90815260200160405180910390205460076040516106fe906127cc565b908152602001604051809103902054935093509350935090919293565b60606003805461072a90612810565b80601f016020809104026020016040519081016040528092919081815260200182805461075690612810565b80156107a35780601f10610778576101008083540402835291602001916107a3565b820191906000526020600020905b81548152906001019060200180831161078657829003601f168201915b5050505050905090565b6000806107b8611809565b90506107c5818585611811565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610855906128b4565b60405180910390fd5b80670de0b6b3a7640000836108739190612903565b600782604051610883919061298e565b908152602001604051809103902054816008846040516108a3919061298e565b9081526020016040518091039020546108bc91906129a5565b11156109015781816040517fe8379cc40000000000000000000000000000000000000000000000000000000081526004016108f89291906129fb565b60405180910390fd5b670de0b6b3a7640000846109159190612903565b600884604051610925919061298e565b90815260200160405180910390205461093e91906129a5565b60088460405161094e919061298e565b90815260200160405180910390208190555061097d85670de0b6b3a7640000866109789190612903565b6119dc565b7f2e01b6cac1db8ec7bbba20f52c7971dd718808586f301d3ef4c44df26e9cd21f8585856040516109b093929190612a2b565b60405180910390a15050505050565b6000600254905090565b6000806109d4611809565b90506109e1858285611a6b565b6109ec858585611af7565b60019150509392505050565b3373ffffffffffffffffffffffffffffffffffffffff16313480821015610a4b576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a60149054906101000a900460ff1615610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290612ab5565b60405180910390fd5b6001600a60146101000a81548160ff02191690831515021790555060003490506000670de0b6b3a7640000606460197f0000000000000000000000000000000000000000000000000000000000000000610af59190612903565b610aff9190612b04565b610b099190612903565b6008604051610b179061270a565b9081526020016040518091039020541015610b3d57610b366000611d6f565b9050610c21565b670de0b6b3a7640000606460197f0000000000000000000000000000000000000000000000000000000000000000610b759190612903565b610b7f9190612b04565b610b899190612903565b670de0b6b3a76400006064600f7f0000000000000000000000000000000000000000000000000000000000000000610bc19190612903565b610bcb9190612b04565b610bd59190612903565b610bdf91906129a5565b6008604051610bed9061270a565b9081526020016040518091039020541015610c1357610c0c6001611d6f565b9050610c20565b610c1d6002611d6f565b90505b5b6000670de0b6b3a76400008383610c389190612903565b610c429190612b04565b90506007604051610c529061270a565b908152602001604051809103902054826008604051610c709061270a565b908152602001604051809103902054610c8991906129a5565b1115610cdf57670de0b6b3a764000082610ca39190612b04565b6040517fe8379cc4000000000000000000000000000000000000000000000000000000008152600401610cd69190612b58565b60405180910390fd5b670de0b6b3a764000081610cf39190612903565b6008604051610d019061270a565b908152602001604051809103902054610d1a91906129a5565b6008604051610d289061270a565b90815260200160405180910390208190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1634604051610d8090612bb7565b60006040518083038185875af1925050503d8060008114610dbd576040519150601f19603f3d011682016040523d82523d6000602084013e610dc2565b606091505b5050905080610dfd576040517fa81dc2e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e0733836119dc565b7fd69dd5c77c111946fad2dbb4a9f28e2ea0f77d1e9c1223a2ac8a787a3cadbc8e33670de0b6b3a764000084610e3d9190612b04565b85604051610e4d93929190612bcc565b60405180910390a1505050506000600a60146101000a81548160ff0219169083151502179055505050565b60006012905090565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610eec57600080fd5b505afa158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f249190612c90565b5050509150506402540be40081610f3b9190612d0b565b91505090565b600080610f4c611809565b9050610f6d818585610f5e858961162b565b610f6891906129a5565b611811565b600191505092915050565b610f8133611096565b8180821015610fbc576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600654610fca91906129a5565b600681905550610fda3384611e7d565b7fda4e31583a2259fe317cadb7a8df04c4ff0072abd596ee177b39d24894a2ec6b338460405161100b929190612e22565b60405180910390a1505050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000611050610e78565b600a61105c9190612f7e565b7f00000000000000000000000000000000000000000000000000000000000000006110879190612903565b905090565b6000600654905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110f0826110ea611809565b83611a6b565b6110fa8282611e7d565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461118c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611183906128b4565b60405180910390fd5b60065481808210156111ca576040517ff49beaed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826006546111d89190612fc9565b6006819055506111e884846119dc565b7f498789b97a924d6566d2d756b70ef5ea7f0720f0e6ed51845c77eda0afa092cb8484604051611219929190612e22565b60405180910390a150505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ac906128b4565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16ff5b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600080600860405161132a906126a9565b90815260200160405180910390205460086040516113479061270a565b90815260200160405180910390205460086040516113649061276b565b9081526020016040518091039020546008604051611381906127cc565b908152602001604051809103902054935093509350935090919293565b6060600480546113ad90612810565b80601f01602080910402602001604051908101604052809291908181526020018280546113d990612810565b80156114265780601f106113fb57610100808354040283529160200191611426565b820191906000526020600020905b81548152906001019060200180831161140957829003601f168201915b5050505050905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114df906128b4565b60405180910390fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c8ac2008786a97973d123ada788ee2512dac4139ac736ef2994f2b3288d99b581604051611558919061257d565b60405180910390a150565b60008061156e611809565b9050600061157c828661162b565b9050838110156115c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b89061306f565b60405180910390fd5b6115ce8286868403611811565b60019250505092915050565b6000806115e5611809565b90506115f2818585611af7565b600191505092915050565b6008818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611719906130db565b60405180910390fd5b61172e6000838361204b565b806002600082825461174091906129a5565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516117f19190612426565b60405180910390a361180560008383612050565b5050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611881576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118789061316d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e8906131ff565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516119cf9190612426565b60405180910390a3505050565b80670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000611a119190612903565b81611a1a6109bf565b611a2491906129a5565b1115611a5c576040517f3e05993300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611a6683836116b2565b505050565b6000611a77848461162b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611af15781811015611ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ada9061326b565b60405180910390fd5b611af08484848403611811565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5e906132fd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bce9061338f565b60405180910390fd5b611be283838361204b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5f90613421565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d569190612426565b60405180910390a3611d69848484612050565b50505050565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611dda57600080fd5b505afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e129190612c90565b50505091505060006402540be40082611e2b9190612d0b565b9050600060098560ff1660038110611e4657611e45613441565b5b602091828204019190069054906101000a900460ff1660ff16905060008183611e6f9190612903565b905080945050505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee4906134e2565b60405180910390fd5b611ef98260008361204b565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7690613574565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516120329190612426565b60405180910390a361204683600084612050565b505050565b505050565b505050565b6000819050919050565b61206881612055565b82525050565b6000608082019050612083600083018761205f565b612090602083018661205f565b61209d604083018561205f565b6120aa606083018461205f565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120ed5780820151818401526020810190506120d2565b838111156120fc576000848401525b50505050565b6000601f19601f8301169050919050565b600061211e826120b3565b61212881856120be565b93506121388185602086016120cf565b61214181612102565b840191505092915050565b600060208201905081810360008301526121668184612113565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121ad82612182565b9050919050565b6121bd816121a2565b81146121c857600080fd5b50565b6000813590506121da816121b4565b92915050565b6121e981612055565b81146121f457600080fd5b50565b600081359050612206816121e0565b92915050565b6000806040838503121561222357612222612178565b5b6000612231858286016121cb565b9250506020612242858286016121f7565b9150509250929050565b60008115159050919050565b6122618161224c565b82525050565b600060208201905061227c6000830184612258565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122c482612102565b810181811067ffffffffffffffff821117156122e3576122e261228c565b5b80604052505050565b60006122f661216e565b905061230282826122bb565b919050565b600067ffffffffffffffff8211156123225761232161228c565b5b61232b82612102565b9050602081019050919050565b82818337600083830152505050565b600061235a61235584612307565b6122ec565b90508281526020810184848401111561237657612375612287565b5b612381848285612338565b509392505050565b600082601f83011261239e5761239d612282565b5b81356123ae848260208601612347565b91505092915050565b6000806000606084860312156123d0576123cf612178565b5b60006123de868287016121cb565b93505060206123ef868287016121f7565b925050604084013567ffffffffffffffff8111156124105761240f61217d565b5b61241c86828701612389565b9150509250925092565b600060208201905061243b600083018461205f565b92915050565b60008060006060848603121561245a57612459612178565b5b6000612468868287016121cb565b9350506020612479868287016121cb565b925050604061248a868287016121f7565b9150509250925092565b600060ff82169050919050565b6124aa81612494565b82525050565b60006020820190506124c560008301846124a1565b92915050565b6000602082840312156124e1576124e0612178565b5b60006124ef848285016121f7565b91505092915050565b60006020828403121561250e5761250d612178565b5b600082013567ffffffffffffffff81111561252c5761252b61217d565b5b61253884828501612389565b91505092915050565b60006020828403121561255757612556612178565b5b6000612565848285016121cb565b91505092915050565b612577816121a2565b82525050565b6000602082019050612592600083018461256e565b92915050565b6000819050919050565b60006125bd6125b86125b384612182565b612598565b612182565b9050919050565b60006125cf826125a2565b9050919050565b60006125e1826125c4565b9050919050565b6125f1816125d6565b82525050565b600060208201905061260c60008301846125e8565b92915050565b6000806040838503121561262957612628612178565b5b6000612637858286016121cb565b9250506020612648858286016121cb565b9150509250929050565b600081905092915050565b7f666f6e646174696f6e4665650000000000000000000000000000000000000000600082015250565b6000612693600c83612652565b915061269e8261265d565b600c82019050919050565b60006126b482612686565b9150819050919050565b7f65636f73797374656d0000000000000000000000000000000000000000000000600082015250565b60006126f4600983612652565b91506126ff826126be565b600982019050919050565b6000612715826126e7565b9150819050919050565b7f6d61726b6574696e674f696e76657374696d656e740000000000000000000000600082015250565b6000612755601583612652565b91506127608261271f565b601582019050919050565b600061277682612748565b9150819050919050565b7f636f6e73756c74696e6700000000000000000000000000000000000000000000600082015250565b60006127b6600a83612652565b91506127c182612780565b600a82019050919050565b60006127d7826127a9565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061282857607f821691505b6020821081141561283c5761283b6127e1565b5b50919050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b600061289e6025836120be565b91506128a982612842565b604082019050919050565b600060208201905081810360008301526128cd81612891565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061290e82612055565b915061291983612055565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612952576129516128d4565b5b828202905092915050565b6000612968826120b3565b6129728185612652565b93506129828185602086016120cf565b80840191505092915050565b600061299a828461295d565b915081905092915050565b60006129b082612055565b91506129bb83612055565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129f0576129ef6128d4565b5b828201905092915050565b60006040820190508181036000830152612a158185612113565b9050612a24602083018461205f565b9392505050565b6000606082019050612a40600083018661256e565b612a4d602083018561205f565b8181036040830152612a5f8184612113565b9050949350505050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000612a9f600e836120be565b9150612aaa82612a69565b602082019050919050565b60006020820190508181036000830152612ace81612a92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b0f82612055565b9150612b1a83612055565b925082612b2a57612b29612ad5565b5b828204905092915050565b6000612b426009836120be565b9150612b4d826126be565b602082019050919050565b60006040820190508181036000830152612b7181612b35565b9050612b80602083018461205f565b92915050565b600081905092915050565b50565b6000612ba1600083612b86565b9150612bac82612b91565b600082019050919050565b6000612bc282612b94565b9150819050919050565b6000606082019050612be1600083018661256e565b612bee602083018561205f565b612bfb604083018461205f565b949350505050565b600069ffffffffffffffffffff82169050919050565b612c2281612c03565b8114612c2d57600080fd5b50565b600081519050612c3f81612c19565b92915050565b6000819050919050565b612c5881612c45565b8114612c6357600080fd5b50565b600081519050612c7581612c4f565b92915050565b600081519050612c8a816121e0565b92915050565b600080600080600060a08688031215612cac57612cab612178565b5b6000612cba88828901612c30565b9550506020612ccb88828901612c66565b9450506040612cdc88828901612c7b565b9350506060612ced88828901612c7b565b9250506080612cfe88828901612c30565b9150509295509295909350565b6000612d1682612c45565b9150612d2183612c45565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615612d6057612d5f6128d4565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615612d9d57612d9c6128d4565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615612dda57612dd96128d4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615612e1757612e166128d4565b5b828202905092915050565b6000604082019050612e37600083018561256e565b612e44602083018461205f565b9392505050565b60008160011c9050919050565b6000808291508390505b6001851115612ea257808604811115612e7e57612e7d6128d4565b5b6001851615612e8d5780820291505b8081029050612e9b85612e4b565b9450612e62565b94509492505050565b600082612ebb5760019050612f77565b81612ec95760009050612f77565b8160018114612edf5760028114612ee957612f18565b6001915050612f77565b60ff841115612efb57612efa6128d4565b5b8360020a915084821115612f1257612f116128d4565b5b50612f77565b5060208310610133831016604e8410600b8410161715612f4d5782820a905083811115612f4857612f476128d4565b5b612f77565b612f5a8484846001612e58565b92509050818404811115612f7157612f706128d4565b5b81810290505b9392505050565b6000612f8982612055565b9150612f9483612494565b9250612fc17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612eab565b905092915050565b6000612fd482612055565b9150612fdf83612055565b925082821015612ff257612ff16128d4565b5b828203905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006130596025836120be565b915061306482612ffd565b604082019050919050565b600060208201905081810360008301526130888161304c565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006130c5601f836120be565b91506130d08261308f565b602082019050919050565b600060208201905081810360008301526130f4816130b8565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006131576024836120be565b9150613162826130fb565b604082019050919050565b600060208201905081810360008301526131868161314a565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006131e96022836120be565b91506131f48261318d565b604082019050919050565b60006020820190508181036000830152613218816131dc565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000613255601d836120be565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006132e76025836120be565b91506132f28261328b565b604082019050919050565b60006020820190508181036000830152613316816132da565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006133796023836120be565b91506133848261331d565b604082019050919050565b600060208201905081810360008301526133a88161336c565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061340b6026836120be565b9150613416826133af565b604082019050919050565b6000602082019050818103600083015261343a816133fe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006134cc6021836120be565b91506134d782613470565b604082019050919050565b600060208201905081810360008301526134fb816134bf565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061355e6022836120be565b915061356982613502565b604082019050919050565b6000602082019050818103600083015261358d81613551565b905091905056fea264697066735822122076383f3267170ab8cda54a3430b5939a30021ed6d9463786dc6733df9b98435d64736f6c63430008090033",
  "devdoc": {
    "author": "Samuele Chiesa",
    "details": "The contract uses openzeppeling lib",
    "kind": "dev",
    "methods": {
      "aggregatorUpgrade(address)": {
        "details": "AggregatorV3Interface is the base of the mint from Matic",
        "params": {
          "newpriceFeedAdd": "New address AggregatorV3Interface"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "params": {
          "amount": "The number of token will burn is already*1e18"
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "constructor": {
        "details": "In the constructor are define the mint cap for each entites and the mint state",
        "params": {
          "priceFeedAdd": "Address AggregatorV3Interface"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getBurned()": {
        "returns": {
          "_0": "return the owner of the contract"
        }
      },
      "getCap()": {
        "returns": {
          "_0": "return the maximum capilazation"
        }
      },
      "getMaticRate()": {
        "details": "The function are create for the test"
      },
      "getMinter4amount()": {
        "details": "The function are create for the test"
      },
      "getMinter4minted()": {
        "details": "The function are create for the test"
      },
      "getOwner()": {
        "returns": {
          "_0": "return the owner of the contract"
        }
      },
      "getPriceFeed()": {
        "details": "The function are create for the test"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mintBurn(address,uint256)": {
        "params": {
          "account": "The account will recieve the money",
          "amount": "The number of token will sent to the account (is already *1e18)"
        }
      },
      "mintDirectly(address,uint256,string)": {
        "details": "Only the owner can call this function and the state of mint will upgrade",
        "params": {
          "_amount": "The number of token will sent to the account",
          "account": "The account will recieve the money",
          "typeMining": "In base of the type choose between: fondationFee, ecosystem, marketingOinvestiment and developing"
        }
      },
      "mintFromMatic()": {
        "details": "Based on the number of matic and mint level, the number of tokens to be sent is defined"
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "title": "BLUE BIRD ERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "aggregatorUpgrade(address)": {
        "notice": "AggregatorV3Interface upgrade allows to upgrade the contract from which we take the Matic/USD exchange rate  "
      },
      "burn(uint256)": {
        "notice": "The function allows to burn tokens"
      },
      "mintBurn(address,uint256)": {
        "notice": "The function allows previously burned tokens to be mint"
      },
      "mintDirectly(address,uint256,string)": {
        "notice": "mintDirectly allows the contract owner to distribute the tokens directly to any investors and all other entities. "
      },
      "mintFromMatic()": {
        "notice": "The function allows to mint tokens by sending Matic"
      }
    },
    "notice": "The contract is write for Marco Liu, creator of BlueBird project. This code had the scope to create a new token ERC20",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 67,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 69,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 71,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1132,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 1134,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "burned",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1138,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "minter4amount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 1142,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "minter4minted",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 1150,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "miningPrice",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint8)3_storage"
      },
      {
        "astId": 1153,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "priceFeed",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 1155,
        "contract": "contracts/BlueBird.sol:BlueBird",
        "label": "locked",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}